
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\003\000\002\005\002\000\002\006\004" +
    "\000\002\006\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\010\007\000\002\011\005\000\002\012\006\000\002" +
    "\013\005\000\002\013\003\000\002\030\003\000\002\015" +
    "\007\000\002\017\003\000\002\017\002\000\002\027\005" +
    "\000\002\027\004\000\002\016\005\000\002\016\003\000" +
    "\002\016\002\000\002\014\004\000\002\014\002\000\002" +
    "\024\006\000\002\025\012\000\002\031\012\000\002\026" +
    "\011\000\002\033\004\000\002\033\005\000\002\034\012" +
    "\000\002\035\006\000\002\035\002\000\002\036\012\000" +
    "\002\037\004\000\002\037\003\000\002\041\006\000\002" +
    "\043\005\000\002\043\002\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\045\020\000\002\044\003" +
    "\000\002\044\003\000\002\046\003\000\002\046\003\000" +
    "\002\047\011\000\002\050\011\000\002\032\006\000\002" +
    "\032\004\000\002\032\002\000\002\051\004\000\002\052" +
    "\004\000\002\053\007\000\002\053\006\000\002\054\007" +
    "\000\002\055\007\000\002\056\006\000\002\022\005\000" +
    "\002\022\005\000\002\022\004\000\002\022\003\000\002" +
    "\021\005\000\002\021\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\003\000\002\040\003\000\002\040" +
    "\004\000\002\040\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\022\007\026\011\004\012\021\013\020\014" +
    "\017\015\022\016\025\017\011\001\002\000\004\007\373" +
    "\001\002\000\006\047\305\056\370\001\002\000\024\002" +
    "\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\001\002\000\024\002\ufff3\007\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\001\002\000\024\002\ufff7\007\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\001\002\000\004" +
    "\007\uff82\001\002\000\024\002\000\007\026\011\004\012" +
    "\021\013\020\014\017\015\022\016\025\017\011\001\002" +
    "\000\024\002\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\001\002\000\004\007\352" +
    "\001\002\000\004\002\351\001\002\000\024\002\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\001\002\000\004\007\uff80\001\002\000\004\007" +
    "\uff81\001\002\000\004\004\347\001\002\000\004\007\uff7f" +
    "\001\002\000\024\002\ufff2\007\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002\000\024" +
    "\002\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\001\002\000\006\007\027\022\030" +
    "\001\002\000\010\046\uffcd\047\uffcd\056\uffcd\001\002\000" +
    "\004\071\334\001\002\000\004\071\031\001\002\000\004" +
    "\072\032\001\002\000\004\073\033\001\002\000\046\007" +
    "\042\013\020\014\017\015\022\017\011\023\051\024\034" +
    "\026\071\031\056\032\063\033\050\034\043\035\070\036" +
    "\035\037\062\040\060\041\040\074\ufff0\001\002\000\004" +
    "\071\321\001\002\000\004\071\313\001\002\000\004\007" +
    "\026\001\002\000\052\007\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\017\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\074\uffd5\001\002\000\004\071\301\001" +
    "\002\000\004\074\300\001\002\000\012\045\107\047\uffcd" +
    "\056\uffcd\071\uffc9\001\002\000\004\046\276\001\002\000" +
    "\052\007\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\074\uffdc\001\002\000\004\046\275\001\002\000\052\007" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\074\uffd3" +
    "\001\002\000\052\007\uffd2\013\uffd2\014\uffd2\015\uffd2\017" +
    "\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\074\uffd2\001\002\000\004\071\267\001\002" +
    "\000\026\004\076\005\102\006\077\007\106\010\103\020" +
    "\100\021\104\046\265\051\101\071\105\001\002\000\052" +
    "\007\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\023\uffd6\024" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\074" +
    "\uffd6\001\002\000\052\007\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\017\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\074\uffdb\001\002\000\052\007\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\017\uffd4\023\uffd4\024\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\074\uffd4\001\002" +
    "\000\052\007\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\074\uffdd\001\002\000\004\071\243\001\002\000\052" +
    "\007\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\023\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\074" +
    "\uffe0\001\002\000\004\071\237\001\002\000\052\007\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\023\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\074\uffdf\001" +
    "\002\000\004\071\233\001\002\000\004\071\225\001\002" +
    "\000\052\007\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\023" +
    "\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\074\uffd7\001\002\000\052\007\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\017\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\074\uffd9\001\002\000\052\007" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\023\uffd8\024\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\074\uffd8" +
    "\001\002\000\052\007\042\013\020\014\017\015\022\017" +
    "\011\023\051\024\034\026\071\027\ufff1\030\ufff1\031\056" +
    "\032\063\033\050\034\043\035\070\036\035\037\062\040" +
    "\060\041\040\074\ufff1\001\002\000\004\046\204\001\002" +
    "\000\004\071\073\001\002\000\052\007\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\023\uffda\024\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\074\uffda\001\002\000\024" +
    "\004\076\005\102\006\077\007\106\010\103\020\100\021" +
    "\104\051\101\071\105\001\002\000\020\050\146\051\137" +
    "\052\143\053\134\054\142\055\133\072\163\001\002\000" +
    "\044\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\055\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063" +
    "\uff84\064\uff84\066\uff84\067\uff84\072\uff84\001\002\000\044" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85" +
    "\064\uff85\066\uff85\067\uff85\072\uff85\001\002\000\044\046" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\066\uff8b\067\uff8b\072\uff8b\001\002\000\044\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\066\uff88\067\uff88\072\uff88\001\002\000\024\004\076\005" +
    "\102\006\077\007\106\010\103\020\100\021\104\051\101" +
    "\071\105\001\002\000\044\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\064\uff8c\066\uff8c\067\uff8c\072" +
    "\uff8c\001\002\000\044\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\066\uff86\067\uff86\072\uff86" +
    "\001\002\000\044\046\uff87\047\uff87\050\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\066\uff87\067\uff87\072\uff87\001" +
    "\002\000\026\004\076\005\102\006\077\007\106\010\103" +
    "\020\100\021\104\051\101\070\120\071\105\001\002\000" +
    "\050\045\107\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\066\uffc9\067\uffc9\071\uffc9\072\uffc9" +
    "\001\002\000\004\007\157\001\002\000\046\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\066" +
    "\uffcc\067\uffcc\071\115\072\uffcc\001\002\000\050\045\113" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\066\uffca\067\uffca\071\uffca\072\uffca\001\002\000" +
    "\044\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\066\uff89\067\uff89\072\uff89\001\002\000\004" +
    "\007\114\001\002\000\050\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8\067" +
    "\uffc8\071\uffc8\072\uffc8\001\002\000\032\004\076\005\102" +
    "\006\077\007\106\010\103\020\100\021\104\047\uffc4\051" +
    "\101\070\120\071\105\072\uffc4\001\002\000\012\047\uffc5" +
    "\066\126\067\127\072\uffc5\001\002\000\044\046\uff99\047" +
    "\uff99\050\146\051\137\052\143\053\134\054\142\055\133" +
    "\057\147\060\141\061\140\062\144\063\145\064\136\066" +
    "\uff99\067\uff99\072\uff99\001\002\000\026\004\076\005\102" +
    "\006\077\007\106\010\103\020\100\021\104\051\101\070" +
    "\120\071\105\001\002\000\014\046\uff9b\047\uff9b\066\uff9b" +
    "\067\uff9b\072\uff9b\001\002\000\006\047\124\072\123\001" +
    "\002\000\044\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\066\uffcb\067\uffcb\072\uffcb\001\002" +
    "\000\026\004\076\005\102\006\077\007\106\010\103\020" +
    "\100\021\104\051\101\070\120\071\105\001\002\000\012" +
    "\047\uffc6\066\126\067\127\072\uffc6\001\002\000\026\004" +
    "\076\005\102\006\077\007\106\010\103\020\100\021\104" +
    "\051\101\070\120\071\105\001\002\000\026\004\076\005" +
    "\102\006\077\007\106\010\103\020\100\021\104\051\101" +
    "\070\120\071\105\001\002\000\014\046\uff9e\047\uff9e\066" +
    "\126\067\uff9e\072\uff9e\001\002\000\014\046\uff9d\047\uff9d" +
    "\066\uff9d\067\uff9d\072\uff9d\001\002\000\014\046\uff9c\047" +
    "\uff9c\066\uff9c\067\uff9c\072\uff9c\001\002\000\024\004\076" +
    "\005\102\006\077\007\106\010\103\020\100\021\104\051" +
    "\101\071\105\001\002\000\024\004\076\005\102\006\077" +
    "\007\106\010\103\020\100\021\104\051\101\071\105\001" +
    "\002\000\024\004\076\005\102\006\077\007\106\010\103" +
    "\020\100\021\104\051\101\071\105\001\002\000\024\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\020\uff95\021\uff95" +
    "\051\uff95\071\uff95\001\002\000\024\004\076\005\102\006" +
    "\077\007\106\010\103\020\100\021\104\051\101\071\105" +
    "\001\002\000\024\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\020\uff97\021\uff97\051\uff97\071\uff97\001\002\000\024" +
    "\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\020\uff93\021" +
    "\uff93\051\uff93\071\uff93\001\002\000\024\004\076\005\102" +
    "\006\077\007\106\010\103\020\100\021\104\051\101\071" +
    "\105\001\002\000\024\004\076\005\102\006\077\007\106" +
    "\010\103\020\100\021\104\051\101\071\105\001\002\000" +
    "\024\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\020\uff96" +
    "\021\uff96\051\uff96\071\uff96\001\002\000\024\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\020\uff98\021\uff98\051\uff98" +
    "\071\uff98\001\002\000\024\004\076\005\102\006\077\007" +
    "\106\010\103\020\100\021\104\051\101\071\105\001\002" +
    "\000\024\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\020" +
    "\uff94\021\uff94\051\uff94\071\uff94\001\002\000\044\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\143\053\134\054\142\055" +
    "\133\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\066\uff92\067\uff92\072\uff92\001\002\000\044\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\133" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\066" +
    "\uff90\067\uff90\072\uff90\001\002\000\044\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\133\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\066\uff8e" +
    "\067\uff8e\072\uff8e\001\002\000\044\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\143\053\134\054\142\055\133\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\066\uff91\067" +
    "\uff91\072\uff91\001\002\000\030\046\uff9a\047\uff9a\050\146" +
    "\051\137\052\143\053\134\054\142\055\133\066\uff9a\067" +
    "\uff9a\072\uff9a\001\002\000\044\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\133\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\066\uff8f\067\uff8f" +
    "\072\uff8f\001\002\000\044\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\133\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\064\uff8d\066\uff8d\067\uff8d\072" +
    "\uff8d\001\002\000\050\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7\067\uffc7" +
    "\071\uffc7\072\uffc7\001\002\000\010\066\126\067\127\072" +
    "\161\001\002\000\044\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\055\uff83\057\uff83\060\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\066\uff83\067\uff83\072\uff83" +
    "\001\002\000\044\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052" +
    "\143\053\134\054\142\055\133\057\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\066\uff8a\067\uff8a\072\uff8a\001" +
    "\002\000\004\073\164\001\002\000\004\027\167\001\002" +
    "\000\010\027\uffb6\030\uffb6\074\uffb6\001\002\000\010\027" +
    "\167\030\200\074\uffb3\001\002\000\010\005\171\006\170" +
    "\007\172\001\002\000\004\075\uffb0\001\002\000\004\075" +
    "\uffb1\001\002\000\004\075\uffb2\001\002\000\004\075\174" +
    "\001\002\000\052\007\042\013\020\014\017\015\022\017" +
    "\011\023\051\024\034\026\071\027\ufff0\030\ufff0\031\056" +
    "\032\063\033\050\034\043\035\070\036\035\037\062\040" +
    "\060\041\040\074\ufff0\001\002\000\010\027\uffb5\030\uffb5" +
    "\074\uffb5\001\002\000\010\027\uffb7\030\uffb7\074\uffb7\001" +
    "\002\000\004\074\203\001\002\000\004\075\201\001\002" +
    "\000\046\007\042\013\020\014\017\015\022\017\011\023" +
    "\051\024\034\026\071\031\056\032\063\033\050\034\043" +
    "\035\070\036\035\037\062\040\060\041\040\074\ufff0\001" +
    "\002\000\004\074\uffb4\001\002\000\052\007\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\023\uffb8\024\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\074\uffb8\001\002\000" +
    "\052\007\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\023\uffa4" +
    "\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\074\uffa4\001\002\000\052\007\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\017\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\074\uffe7\001\002\000\052\007\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\023\uffe6\024\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\074\uffe6\001" +
    "\002\000\052\007\uffee\013\uffee\014\uffee\015\uffee\017\uffee" +
    "\023\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\074\uffee\001\002\000\052\007\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\074\uffe2\001\002\000\052" +
    "\007\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\074" +
    "\uffe3\001\002\000\052\007\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\074\uffeb\001\002\000\052\007\uffec\013" +
    "\uffec\014\uffec\015\uffec\017\uffec\023\uffec\024\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\074\uffec\001\002" +
    "\000\052\007\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\023" +
    "\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\074\uffe9\001\002\000\052\007\uffef\013\uffef\014\uffef" +
    "\015\uffef\017\uffef\023\uffef\024\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\074\uffef\001\002\000\052\007" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\074\uffe4" +
    "\001\002\000\052\007\uffea\013\uffea\014\uffea\015\uffea\017" +
    "\uffea\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\074\uffea\001\002\000\004\046\224\001\002" +
    "\000\052\007\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\023" +
    "\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\074\uffe5\001\002\000\052\007\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\017\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\074\uffe8\001\002\000\052\007" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\023\uffe1\024\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\074\uffe1" +
    "\001\002\000\052\007\uffed\013\uffed\014\uffed\015\uffed\017" +
    "\uffed\023\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\074\uffed\001\002\000\026\004\076\005\102" +
    "\006\077\007\106\010\103\020\100\021\104\051\101\070" +
    "\120\071\105\001\002\000\010\066\126\067\127\072\227" +
    "\001\002\000\004\073\230\001\002\000\046\007\042\013" +
    "\020\014\017\015\022\017\011\023\051\024\034\026\071" +
    "\031\056\032\063\033\050\034\043\035\070\036\035\037" +
    "\062\040\060\041\040\074\ufff0\001\002\000\004\074\232" +
    "\001\002\000\052\007\uffaa\013\uffaa\014\uffaa\015\uffaa\017" +
    "\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\074\uffaa\001\002\000\004\007\234\001\002" +
    "\000\004\072\235\001\002\000\004\046\236\001\002\000" +
    "\052\007\uffa1\013\uffa1\014\uffa1\015\uffa1\017\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\074\uffa1\001\002\000\026\004\076\005\102\006\077\007" +
    "\106\010\103\020\100\021\104\051\101\070\120\071\105" +
    "\001\002\000\010\066\126\067\127\072\241\001\002\000" +
    "\004\046\242\001\002\000\052\007\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\017\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\074\uffa0\001\002\000\006\013" +
    "\246\017\245\001\002\000\004\007\247\001\002\000\004" +
    "\007\uffad\001\002\000\004\007\uffae\001\002\000\004\056" +
    "\250\001\002\000\024\004\076\005\102\006\077\007\106" +
    "\010\103\020\100\021\104\051\101\071\105\001\002\000" +
    "\020\046\252\050\146\051\137\052\143\053\134\054\142" +
    "\055\133\001\002\000\026\004\076\005\102\006\077\007" +
    "\106\010\103\020\100\021\104\051\101\070\120\071\105" +
    "\001\002\000\010\046\254\066\126\067\127\001\002\000" +
    "\006\043\256\044\255\001\002\000\004\072\uffac\001\002" +
    "\000\004\072\uffab\001\002\000\004\072\260\001\002\000" +
    "\004\073\261\001\002\000\044\007\042\013\020\014\017" +
    "\015\022\017\011\023\051\024\034\026\071\031\056\032" +
    "\063\033\050\034\043\035\070\036\035\037\062\040\060" +
    "\041\040\001\002\000\046\007\042\013\020\014\017\015" +
    "\022\017\011\023\051\024\034\026\071\031\056\032\063" +
    "\033\050\034\043\035\070\036\035\037\062\040\060\041" +
    "\040\074\263\001\002\000\052\007\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\017\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\074\uffaf\001\002\000\020\046" +
    "\266\050\146\051\137\052\143\053\134\054\142\055\133" +
    "\001\002\000\052\007\uffbd\013\uffbd\014\uffbd\015\uffbd\017" +
    "\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\074\uffbd\001\002\000\052\007\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\017\uffbc\023\uffbc\024\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\074\uffbc\001\002\000" +
    "\026\004\076\005\102\006\077\007\106\010\103\020\100" +
    "\021\104\051\101\070\120\071\105\001\002\000\010\066" +
    "\126\067\127\072\271\001\002\000\004\073\272\001\002" +
    "\000\046\007\042\013\020\014\017\015\022\017\011\023" +
    "\051\024\034\026\071\031\056\032\063\033\050\034\043" +
    "\035\070\036\035\037\062\040\060\041\040\074\ufff0\001" +
    "\002\000\004\074\274\001\002\000\052\007\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\017\uffa9\023\uffa9\024\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\074\uffa9\001\002\000" +
    "\052\007\uffde\013\uffde\014\uffde\015\uffde\017\uffde\023\uffde" +
    "\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\074\uffde\001\002\000\052\007\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\017\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\074\uffa5\001\002\000\004\071\115" +
    "\001\002\000\024\002\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\001\002\000\004" +
    "\072\302\001\002\000\004\046\303\001\002\000\052\007" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f\023\uff9f\024\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\074\uff9f" +
    "\001\002\000\010\046\uffc2\047\305\056\307\001\002\000" +
    "\004\007\312\001\002\000\004\046\311\001\002\000\026" +
    "\004\076\005\102\006\077\007\106\010\103\020\100\021" +
    "\104\051\101\070\120\071\105\001\002\000\010\046\uffc3" +
    "\066\126\067\127\001\002\000\062\002\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\074\uffcf\001\002\000\010\046\uffce\047\uffce\056" +
    "\uffce\001\002\000\030\004\076\005\102\006\077\007\106" +
    "\010\103\020\100\021\104\051\101\070\120\071\105\072" +
    "\315\001\002\000\010\066\126\067\127\072\317\001\002" +
    "\000\004\046\316\001\002\000\052\007\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\017\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\074\uffa2\001\002\000\004" +
    "\046\320\001\002\000\052\007\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\017\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\074\uffa3\001\002\000\026\004\076" +
    "\005\102\006\077\007\106\010\103\020\100\021\104\051" +
    "\101\070\120\071\105\001\002\000\010\066\126\067\127" +
    "\072\323\001\002\000\004\073\324\001\002\000\046\007" +
    "\042\013\020\014\017\015\022\017\011\023\051\024\034" +
    "\026\071\031\056\032\063\033\050\034\043\035\070\036" +
    "\035\037\062\040\060\041\040\074\ufff0\001\002\000\004" +
    "\074\326\001\002\000\054\007\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\017\uffb9\023\uffb9\024\uffb9\025\330\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\074\uffb9\001\002\000\052" +
    "\007\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\074" +
    "\uffbb\001\002\000\004\073\331\001\002\000\046\007\042" +
    "\013\020\014\017\015\022\017\011\023\051\024\034\026" +
    "\071\031\056\032\063\033\050\034\043\035\070\036\035" +
    "\037\062\040\060\041\040\074\ufff0\001\002\000\004\074" +
    "\333\001\002\000\052\007\uffba\013\uffba\014\uffba\015\uffba" +
    "\017\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\074\uffba\001\002\000\016\013\020\014" +
    "\017\015\022\017\011\047\uffa6\072\uffa6\001\002\000\006" +
    "\047\341\072\340\001\002\000\004\007\337\001\002\000" +
    "\006\047\uffa7\072\uffa7\001\002\000\004\073\344\001\002" +
    "\000\012\013\020\014\017\015\022\017\011\001\002\000" +
    "\004\007\343\001\002\000\006\047\uffa8\072\uffa8\001\002" +
    "\000\046\007\042\013\020\014\017\015\022\017\011\023" +
    "\051\024\034\026\071\031\056\032\063\033\050\034\043" +
    "\035\070\036\035\037\062\040\060\041\040\074\ufff0\001" +
    "\002\000\004\074\346\001\002\000\024\002\uffbf\007\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\001\002\000\004\046\350\001\002\000\024\002\uffd0" +
    "\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\001\002\000\004\002\001\001\002\000\012" +
    "\046\uffcd\047\uffcd\056\uffcd\071\353\001\002\000\016\013" +
    "\020\014\017\015\022\017\011\047\uffa6\072\uffa6\001\002" +
    "\000\006\047\341\072\355\001\002\000\004\073\356\001" +
    "\002\000\046\007\042\013\020\014\017\015\022\017\011" +
    "\023\051\024\034\026\071\031\056\032\063\033\050\034" +
    "\043\035\070\036\035\037\062\040\060\041\040\074\ufff0" +
    "\001\002\000\004\074\360\001\002\000\024\002\uffc0\007" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\001\002\000\024\002\ufff9\007\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\001\002" +
    "\000\024\002\uffff\007\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\001\002\000\024\002\ufffd" +
    "\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\001\002\000\024\002\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\001" +
    "\002\000\024\002\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\001\002\000\024\002" +
    "\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\001\002\000\024\002\ufffe\007\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\001\002\000\024\004\076\005\102\006\077\007\106\010" +
    "\103\020\100\021\104\051\101\071\105\001\002\000\020" +
    "\046\372\050\146\051\137\052\143\053\134\054\142\055" +
    "\133\001\002\000\062\002\uffc1\007\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\023\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\074" +
    "\uffc1\001\002\000\004\045\374\001\002\000\004\042\375" +
    "\001\002\000\004\046\376\001\002\000\024\002\uffd1\007" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\030\002\014\004\011\007\013\010\023\011" +
    "\007\012\005\013\004\024\015\025\012\026\022\031\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\013\010\361\011\366\012\362\013\004\024" +
    "\365\025\363\026\360\031\364\001\001\000\002\001\001" +
    "\000\004\013\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\005" +
    "\040\006\066\007\035\012\060\013\004\015\044\024\056" +
    "\033\054\034\043\036\052\045\071\047\064\050\065\051" +
    "\063\052\051\053\036\054\053\055\045\056\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\276\027\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\074\040\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\035\012\206\013\004\015\217\024\214" +
    "\033\212\034\211\036\216\045\213\047\221\050\204\051" +
    "\205\052\220\053\215\054\210\055\207\056\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\074\040\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\074\040\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\074\021" +
    "\120\022\157\040\116\001\001\000\010\017\107\027\110" +
    "\030\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\074\016\121\021\120\022\115\040" +
    "\116\001\001\000\002\001\001\000\004\020\134\001\001" +
    "\000\012\015\074\021\120\022\131\040\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\074\021\120\022\124\040\116\001\001\000\002\001" +
    "\001\000\012\015\074\021\120\022\130\040\116\001\001" +
    "\000\012\015\074\021\120\022\127\040\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\074\040\155\001\001\000\006\015\074\040\154\001" +
    "\001\000\006\015\074\040\153\001\001\000\002\001\001" +
    "\000\006\015\074\040\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\074\040\151\001\001\000\006" +
    "\015\074\040\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\074\040\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\165" +
    "\041\164\001\001\000\002\001\001\000\006\041\175\043" +
    "\176\001\001\000\004\042\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\005\174\006\066\007\035\012\060\013\004\015\044" +
    "\024\056\033\054\034\043\036\052\045\071\047\064\050" +
    "\065\051\063\052\051\053\036\054\053\055\045\056\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\201\006\066\007\035" +
    "\012\060\013\004\015\044\024\056\033\054\034\043\036" +
    "\052\045\071\047\064\050\065\051\063\052\051\053\036" +
    "\054\053\055\045\056\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\074\021\120\022" +
    "\225\040\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\005\230\006\066\007\035\012\060\013\004\015" +
    "\044\024\056\033\054\034\043\036\052\045\071\047\064" +
    "\050\065\051\063\052\051\053\036\054\053\055\045\056" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\074\021\120\022\237\040\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\074\040" +
    "\250\001\001\000\002\001\001\000\012\015\074\021\120" +
    "\022\252\040\116\001\001\000\002\001\001\000\004\046" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\261\007\035\012" +
    "\060\013\004\015\044\024\056\033\054\034\043\036\052" +
    "\045\071\047\064\050\065\051\063\052\051\053\036\054" +
    "\053\055\045\056\046\001\001\000\044\007\035\012\206" +
    "\013\004\015\217\024\214\033\212\034\211\036\216\045" +
    "\213\047\221\050\204\051\205\052\220\053\215\054\210" +
    "\055\207\056\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\074" +
    "\021\120\022\267\040\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\005\272\006\066\007\035\012\060" +
    "\013\004\015\044\024\056\033\054\034\043\036\052\045" +
    "\071\047\064\050\065\051\063\052\051\053\036\054\053" +
    "\055\045\056\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\074\021\120\022\307\040" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\074\021\120\022\313\040\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\074\021" +
    "\120\022\321\040\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\005\324\006\066\007\035\012\060\013" +
    "\004\015\044\024\056\033\054\034\043\036\052\045\071" +
    "\047\064\050\065\051\063\052\051\053\036\054\053\055" +
    "\045\056\046\001\001\000\002\001\001\000\004\035\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\005" +
    "\331\006\066\007\035\012\060\013\004\015\044\024\056" +
    "\033\054\034\043\036\052\045\071\047\064\050\065\051" +
    "\063\052\051\053\036\054\053\055\045\056\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\335\032" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\005\344\006\066" +
    "\007\035\012\060\013\004\015\044\024\056\033\054\034" +
    "\043\036\052\045\071\047\064\050\065\051\063\052\051" +
    "\053\036\054\053\055\045\056\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\335\032" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\005\356\006\066\007\035\012\060\013\004\015\044\024" +
    "\056\033\054\034\043\036\052\045\071\047\064\050\065" +
    "\051\063\052\051\053\036\054\053\055\045\056\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\074\040\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public static Nodo padre = new Nodo("PADRE");
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico Recuperado -> lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error Sintactico Panico -> Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAR ::= CUERPO_PRINCIPAL 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Nodo n = new Nodo("INICIAR");
                               n.addHijo(cp);
                               padre  = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL IMPORTAR 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL DEFINIR 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL DECLARACION_VARIABLES 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL ASIGNACIONES 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL FUNCIONES 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL METODOS 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_PRINCIPAL ::= CUERPO_PRINCIPAL METODO_PRINCIPAL 
            {
              Nodo RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_PRINCIPAL ::= IMPORTAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_PRINCIPAL ::= DEFINIR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_PRINCIPAL ::= DECLARACION_VARIABLES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_PRINCIPAL ::= ASIGNACIONES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_PRINCIPAL ::= FUNCIONES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_PRINCIPAL ::= METODOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_PRINCIPAL ::= METODO_PRINCIPAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= LISTA_SENTENCIAS 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= 
            {
              Nodo RESULT =null;
		
                               Nodo n = new Nodo("LISTA_SENTENCIAS");
                               RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS ASIGNACIONES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS DECLARACION_VARIABLES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS LLAMADAS_FUNC ptoYcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS RETORNO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENT_ES_VERDADERO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS CAMBIAR_A 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS PARA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS HASTA_QUE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS MIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS ROMPER 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS CONTINUAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS MOSTRAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS DIBUJAR_AST 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS DIBUJAR_EXP 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS DIBUJAR_TS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_SENTENCIAS ::= ASIGNACIONES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_SENTENCIAS ::= DECLARACION_VARIABLES 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_SENTENCIAS ::= LLAMADAS_FUNC ptoYcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_SENTENCIAS ::= RETORNO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_SENTENCIAS ::= SENT_ES_VERDADERO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_SENTENCIAS ::= CAMBIAR_A 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_SENTENCIAS ::= PARA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_SENTENCIAS ::= HASTA_QUE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_SENTENCIAS ::= MIENTRAS_QUE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_SENTENCIAS ::= ROMPER 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_SENTENCIAS ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_SENTENCIAS ::= MOSTRAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_SENTENCIAS ::= DIBUJAR_AST 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_SENTENCIAS ::= DIBUJAR_EXP 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_SENTENCIAS ::= DIBUJAR_TS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPORTAR ::= _importar identificador punto _asa ptoYcoma 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                             Nodo n = new Nodo("IMPORTAR");
                             Nodo n1 = new Nodo(imp, impleft, impright);
                             Nodo n2 = new Nodo(id, idleft, idright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEFINIR ::= _definir cadena ptoYcoma 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                             Nodo n = new Nodo("DEFINIR");
                             String cadena = cad.replace("\"", "");
                             Nodo n1 = new Nodo(def, defleft, defright);
                             Nodo n2 = new Nodo(cadena, cadleft, cadright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINIR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VARIABLES ::= TIPO LISTA_VARIABLES ASIGN_VARIABLES ptoYcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                             Nodo n = new Nodo("DECLARACION_VARIABLES");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             if(n3 != null){
                                n.addHijo(n3);
                             }
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_VARIABLES ::= LISTA_VARIABLES coma identificador 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("LISTA_VARIABLES");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(id, idleft, idright);
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_VARIABLES ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("LISTA_VARIABLES");
                             Nodo n1 = new Nodo(id, idleft, idright);
                             n.addHijo(n1);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAMADA_VARIABLES ::= LISTA_ID_LLAMADA_FUN 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_VARIABLES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAMADAS_FUNC ::= identificador LISTA_ID_LLAMADA_FUN parent_a LISTA_LLAMADA_FUNC parent_c 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              Nodo n = new Nodo("LLAMADA_FUNCION");
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS_FUNC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_ID_LLAMADA_FUN ::= LLAMADITA_FUN 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ID_LLAMADA_FUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_ID_LLAMADA_FUN ::= 
            {
              Nodo RESULT =null;
		
                              Nodo n = new Nodo("LISTA_ID");
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ID_LLAMADA_FUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADITA_FUN ::= LLAMADITA_FUN punto identificador 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo n = new Nodo("LISTA_ID");
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADITA_FUN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADITA_FUN ::= punto identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo n = new Nodo("LISTA_ID");
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADITA_FUN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_LLAMADA_FUNC ::= LISTA_LLAMADA_FUNC coma EXPR_LOGICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo n = new Nodo("LISTA_PARAM");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_LLAMADA_FUNC ::= EXPR_LOGICA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo n = new Nodo("LISTA_PARAM");
                              n.addHijo(exp);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_LLAMADA_FUNC ::= 
            {
              Nodo RESULT =null;
		
                              Nodo n = new Nodo("LISTA_PARAM");
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGN_VARIABLES ::= asignacion EXPR_LOGICA 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGN_VARIABLES ::= 
            {
              Nodo RESULT =null;
		
                             RESULT = null;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACIONES ::= LISTA_VARIABLES asignacion EXPR_ARIT ptoYcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                             Nodo n = new Nodo("ASIGNACIONES");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCIONES ::= TIPO identificador parent_a LISTA_PARAMETROS parent_c llave_a SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                              Nodo n = new Nodo("FUNCION");
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              n.addHijo(n4);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODOS ::= _vacio identificador parent_a LISTA_PARAMETROS parent_c llave_a SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                              Nodo n = new Nodo("METODO");
                              Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              n.addHijo(n4);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // METODO_PRINCIPAL ::= _vacio _principal parent_a parent_c llave_a SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                              Nodo n = new Nodo("METODO_PRINCIPAL");
                              Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_PRINCIPAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RETORNO ::= _retorno ptoYcoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo n = new Nodo("RETORNO");
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETORNO ::= _retorno EXPR_ARIT ptoYcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo n = new Nodo("RETORNO");
                                n.addHijo(n1);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENT_ES_VERDADERO ::= _esVerdadero parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c ES_VERD_CON_FALSO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("ES_VERDADERO");
                                n.addHijo(n2);
                                n.addHijo(n3);
                                if(n4 != null){
                                    n.addHijo(n4);
                                }
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_ES_VERDADERO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ES_VERD_CON_FALSO ::= _esFalso llave_a SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo n = new Nodo("ES_FALSO");
                                n.addHijo(n1);          
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_VERD_CON_FALSO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ES_VERD_CON_FALSO ::= 
            {
              Nodo RESULT =null;
		
                               RESULT = null;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_VERD_CON_FALSO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CAMBIAR_A ::= _cambiarA parent_a EXPR_ARIT parent_c llave_a CASOS NO_CUMPLE llave_c 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo n = new Nodo("CAMBIAR_A");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                if(n3 != null){
                                    n.addHijo(n3);
                                }
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMBIAR_A",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASOS ::= CASOS LISTA_CASOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("LISTA_CASOS");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASOS ::= LISTA_CASOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_CASOS");
                                n.addHijo(n1);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_CASOS ::= _valor VALORES_CASE dosPtos SENTENCIAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("LISTA_CASOS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NO_CUMPLE ::= _noCumple dosPtos SENTENCIAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo n = new Nodo("NO_CUMPLE"); 
                                n.addHijo(n1);
                                RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NO_CUMPLE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NO_CUMPLE ::= 
            {
              Nodo RESULT =null;
		
                                RESULT = null;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NO_CUMPLE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES_CASE ::= identificador 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES_CASE ::= numEntero 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORES_CASE ::= numDecimal 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARA ::= _para parent_a VALORES_PARA identificador asignacion EXPR_ARIT ptoYcoma EXPR_LOGICA ptoYcoma ITERADOR parent_c llave_a LISTA_SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int valInileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int valIniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo valIni = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo it = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              Nodo n = new Nodo("PARA");
                              Nodo nodoCondIni = new Nodo("COND_INI");
                              nodoCondIni.addHijo(tipo);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              nodoCondIni.addHijo(n2);
                              nodoCondIni.addHijo(valIni);
                              Nodo nodoCondFin = new Nodo("COND_FIN");
                              nodoCondFin.addHijo(exp);
                              Nodo nodoIncDec = new Nodo("PASO");
                              Nodo nodoIncId = new Nodo(id, idleft, idright);
                              nodoIncDec.addHijo(nodoIncId);
                              nodoIncDec.addHijo(it);
                              n.addHijo(nodoCondIni);
                              n.addHijo(nodoCondFin);
                              n.addHijo(nodoIncDec);
                              n.addHijo(sent);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALORES_PARA ::= _decimal 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_PARA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALORES_PARA ::= _entero 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_PARA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ITERADOR ::= incremento 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ITERADOR ::= decremento 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // HASTA_QUE ::= _hastaQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              Nodo n = new Nodo("HASTA_QUE");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HASTA_QUE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MIENTRAS_QUE ::= _mientrasQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              Nodo n = new Nodo("MIENTRAS_QUE");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIENTRAS_QUE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma TIPO identificador 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              Nodo n3 = new Nodo(id, idleft, idright);
                              n.addHijo(n3);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_PARAMETROS ::= TIPO identificador 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTA_PARAMETROS ::= 
            {
              Nodo RESULT =null;
		
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ROMPER ::= _romper ptoYcoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              Nodo n = new Nodo("ROMPER", idleft, idright);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROMPER",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTINUAR ::= _continuar ptoYcoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              Nodo n = new Nodo("CONTINUAR", idleft, idright);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUAR",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MOSTRAR ::= _mostrar parent_a EXPR_LOGICA parent_c ptoYcoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                              Nodo n = new Nodo("MOSTRAR", idleft, idright);
                              n.addHijo(exp);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRAR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MOSTRAR ::= _mostrar parent_a parent_c ptoYcoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                              Nodo n = new Nodo("MOSTRAR", idleft, idright);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRAR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DIBUJAR_AST ::= _dibujarAst parent_a identificador parent_c ptoYcoma 
            {
              Nodo RESULT =null;
		int dibleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dibright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                              Nodo n = new Nodo("DIBUJAR_AST", dibleft, dibright);
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIBUJAR_AST",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DIBUJAR_EXP ::= _dibujarExp parent_a EXPR_LOGICA parent_c ptoYcoma 
            {
              Nodo RESULT =null;
		int dibleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dibright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                              Nodo n = new Nodo("DIBUJAR_EXP", dibleft, dibright);
                              n.addHijo(exp);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIBUJAR_EXP",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DIBUJAR_TS ::= _dibujarTs parent_a parent_c ptoYcoma 
            {
              Nodo RESULT =null;
		int dibleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dibright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                              Nodo n = new Nodo("DIBUJAR_TS", dibleft, dibright);
                              RESULT = n;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIBUJAR_TS",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR_LOGICA ::= EXPR_LOGICA or EXPR_LOGICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_LOGICA");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR_LOGICA ::= EXPR_LOGICA and EXPR_LOGICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_LOGICA");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR_LOGICA ::= not EXPR_LOGICA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("NEG");
                             Nodo n1 = new Nodo(exp, expleft, expright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPR_LOGICA ::= EXPR_REL 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = exp;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPR_REL ::= EXPR_ARIT OP_REL EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_REL");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_REL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPR_REL ::= EXPR_ARIT 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_REL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_REL ::= mayor 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_REL ::= menor 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_REL ::= menorQ 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_REL ::= mayorQ 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_REL ::= igual 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_REL ::= diferente 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPR_ARIT ::= EXPR_ARIT mas EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPR_ARIT ::= EXPR_ARIT menos EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR_ARIT ::= EXPR_ARIT por EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPR_ARIT ::= EXPR_ARIT div EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPR_ARIT ::= EXPR_ARIT modular EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPR_ARIT ::= EXPR_ARIT potencia EXPR_ARIT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPR_ARIT ::= numEntero 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright, "entero");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPR_ARIT ::= numDecimal 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright, "decimal");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPR_ARIT ::= menos EXPR_ARIT 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo("NUM_NEG");
                             Nodo n1 = new Nodo(exp, expleft, expright, n2.getTipoVar());
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPR_ARIT ::= identificador LLAMADA_VARIABLES 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright, "id");
                             n.addHijo(n2);
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPR_ARIT ::= _verdadero 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright, "booleano");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPR_ARIT ::= _falso 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright, "booleano");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR_ARIT ::= caracter 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(exp, expleft, expright, "cadena");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPR_ARIT ::= cadena 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             String cadena = exp.replace("\"", "");
                             Nodo n = new Nodo(cadena, expleft, expright, "cadena");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPR_ARIT ::= LLAMADAS_FUNC 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = exp;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPR_ARIT ::= parent_a EXPR_LOGICA parent_c 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                             RESULT = exp;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TIPO ::= _entero 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"entero");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPO ::= _decimal 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"decimal");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPO ::= _booleano 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"booleano");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPO ::= _texto 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"texto");
                             RESULT = n;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
