
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\006\006\000\002\007\005\000\002\007" +
    "\003\000\002\011\006\000\002\012\005\000\002\012\003" +
    "\000\002\012\002\000\002\010\004\000\002\010\002\000" +
    "\002\017\006\000\002\020\011\000\002\022\011\000\002" +
    "\021\010\000\002\024\004\000\002\024\005\000\002\025" +
    "\012\000\002\026\006\000\002\026\002\000\002\027\012" +
    "\000\002\030\004\000\002\030\003\000\002\032\006\000" +
    "\002\034\005\000\002\034\002\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\036\020\000\002\035" +
    "\003\000\002\035\003\000\002\037\003\000\002\037\003" +
    "\000\002\023\006\000\002\023\004\000\002\023\002\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\015\003\000\002\014\005\000\002\014\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\032\002\ufffe\007\034\011\004\013\024\014" +
    "\023\015\030\016\033\017\010\023\007\024\026\026\020" +
    "\031\031\001\002\000\040\002\uffea\007\uffea\011\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\023\uffea\024\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\061\uffea\001\002\000" +
    "\040\002\uffe8\007\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\061\uffe8\001\002\000\040\002\uffec\007\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\023" +
    "\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\061\uffec" +
    "\001\002\000\026\004\041\005\045\006\042\007\050\010" +
    "\046\020\043\021\047\033\251\036\044\056\051\001\002" +
    "\000\004\007\uffa6\001\002\000\040\002\uffff\007\034\011" +
    "\234\013\024\014\023\015\030\016\033\017\010\023\007" +
    "\024\026\026\020\027\uffff\030\uffff\031\031\061\uffff\001" +
    "\002\000\040\002\uffeb\007\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\023\uffeb\024\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\061\uffeb\001\002\000\004\002\000" +
    "\001\002\000\040\002\uffef\007\uffef\011\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\023\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\061\uffef\001\002\000\040\002" +
    "\ufff1\007\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\023\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\061\ufff1\001\002\000\040\002\ufff2\007\ufff2\011\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\023\ufff2\024" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\061\ufff2\001\002" +
    "\000\004\007\217\001\002\000\004\056\174\001\002\000" +
    "\004\002\173\001\002\000\040\002\uffe9\007\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\023\uffe9\024" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\061\uffe9\001\002" +
    "\000\004\007\uffa8\001\002\000\004\007\uffa9\001\002\000" +
    "\040\002\uffed\007\uffed\011\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\023\uffed\024\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\061\uffed\001\002\000\004\056\160\001\002" +
    "\000\040\002\ufff0\007\ufff0\011\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\061\ufff0\001\002\000\004\007\uffa7\001" +
    "\002\000\004\056\137\001\002\000\004\033\136\001\002" +
    "\000\006\007\115\022\116\001\002\000\010\007\uffa5\043" +
    "\036\056\035\001\002\000\030\004\041\005\045\006\042" +
    "\007\050\010\046\020\043\021\047\034\uffe1\036\044\056" +
    "\051\057\uffe1\001\002\000\024\004\041\005\045\006\042" +
    "\007\050\010\046\020\043\021\047\036\044\056\051\001" +
    "\002\000\016\033\107\035\075\036\067\037\072\040\064" +
    "\042\063\001\002\000\042\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\042\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab\057\uffab\001" +
    "\002\000\042\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\042\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\053\uffac\054\uffac\057\uffac\001\002\000\042" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\042" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\053\uffb2\054\uffb2\057\uffb2\001\002\000\042\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054" +
    "\uffaf\057\uffaf\001\002\000\024\004\041\005\045\006\042" +
    "\007\050\010\046\020\043\021\047\036\044\056\051\001" +
    "\002\000\042\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\053\uffb3\054\uffb3\057\uffb3\001\002\000\042" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\042" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\053\uffad\054\uffad\057\uffad\001\002\000\042\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\042\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae\054" +
    "\uffae\057\uffae\001\002\000\044\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\042\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\056\035" +
    "\057\uffb0\001\002\000\026\004\041\005\045\006\042\007" +
    "\050\010\046\020\043\021\047\036\044\055\054\056\051" +
    "\001\002\000\010\053\057\054\060\057\105\001\002\000" +
    "\040\033\uffbf\035\075\036\067\037\072\040\064\042\063" +
    "\044\076\045\071\046\070\047\073\050\074\051\066\053" +
    "\uffbf\054\uffbf\057\uffbf\001\002\000\026\004\041\005\045" +
    "\006\042\007\050\010\046\020\043\021\047\036\044\055" +
    "\054\056\051\001\002\000\012\033\uffc1\053\uffc1\054\uffc1" +
    "\057\uffc1\001\002\000\012\033\uffc2\053\uffc2\054\uffc2\057" +
    "\uffc2\001\002\000\026\004\041\005\045\006\042\007\050" +
    "\010\046\020\043\021\047\036\044\055\054\056\051\001" +
    "\002\000\026\004\041\005\045\006\042\007\050\010\046" +
    "\020\043\021\047\036\044\055\054\056\051\001\002\000" +
    "\012\033\uffc4\053\057\054\uffc4\057\uffc4\001\002\000\012" +
    "\033\uffc3\053\uffc3\054\uffc3\057\uffc3\001\002\000\024\004" +
    "\041\005\045\006\042\007\050\010\046\020\043\021\047" +
    "\036\044\056\051\001\002\000\024\004\041\005\045\006" +
    "\042\007\050\010\046\020\043\021\047\036\044\056\051" +
    "\001\002\000\024\004\041\005\045\006\042\007\050\010" +
    "\046\020\043\021\047\036\044\056\051\001\002\000\024" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\020\uffbb\021" +
    "\uffbb\036\uffbb\056\uffbb\001\002\000\024\004\041\005\045" +
    "\006\042\007\050\010\046\020\043\021\047\036\044\056" +
    "\051\001\002\000\024\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\020\uffbd\021\uffbd\036\uffbd\056\uffbd\001\002\000" +
    "\024\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\020\uffb9" +
    "\021\uffb9\036\uffb9\056\uffb9\001\002\000\024\004\041\005" +
    "\045\006\042\007\050\010\046\020\043\021\047\036\044" +
    "\056\051\001\002\000\024\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\020\uffbc\021\uffbc\036\uffbc\056\uffbc\001\002" +
    "\000\024\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\020" +
    "\uffbe\021\uffbe\036\uffbe\056\uffbe\001\002\000\024\004\041" +
    "\005\045\006\042\007\050\010\046\020\043\021\047\036" +
    "\044\056\051\001\002\000\024\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\020\uffba\021\uffba\036\uffba\056\uffba\001" +
    "\002\000\042\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\072" +
    "\040\064\042\063\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\053\uffb8\054\uffb8\057\uffb8\001\002\000\042" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\042" +
    "\063\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\053\uffb6\054\uffb6\057\uffb6\001\002\000\042\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\072\040\064\042\063\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7\054" +
    "\uffb7\057\uffb7\001\002\000\024\033\uffc0\035\075\036\067" +
    "\037\072\040\064\042\063\053\uffc0\054\uffc0\057\uffc0\001" +
    "\002\000\042\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\042\063\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\053\uffb5\054\uffb5\057\uffb5\001\002\000\042" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\042" +
    "\063\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\053\uffb4\054\uffb4\057\uffb4\001\002\000\042\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054" +
    "\uffaa\057\uffaa\001\002\000\042\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\072\040\064\042\063\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\057\uffb1" +
    "\001\002\000\040\002\uffde\007\uffde\011\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\023\uffde\024\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\061\uffde\001\002\000\020\034" +
    "\uffe2\035\075\036\067\037\072\040\064\042\063\057\uffe2" +
    "\001\002\000\006\034\113\057\112\001\002\000\042\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\053" +
    "\uffe4\054\uffe4\057\uffe4\001\002\000\024\004\041\005\045" +
    "\006\042\007\050\010\046\020\043\021\047\036\044\056" +
    "\051\001\002\000\020\034\uffe3\035\075\036\067\037\072" +
    "\040\064\042\063\057\uffe3\001\002\000\004\056\123\001" +
    "\002\000\004\056\117\001\002\000\004\057\120\001\002" +
    "\000\004\060\121\001\002\000\004\061\122\001\002\000" +
    "\040\002\uffdb\007\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\061\uffdb\001\002\000\020\007\124\013\024" +
    "\014\023\015\030\017\010\034\uffc5\057\uffc5\001\002\000" +
    "\004\007\uffa5\001\002\000\006\034\131\057\130\001\002" +
    "\000\004\007\127\001\002\000\006\034\uffc6\057\uffc6\001" +
    "\002\000\004\060\134\001\002\000\014\007\124\013\024" +
    "\014\023\015\030\017\010\001\002\000\004\007\133\001" +
    "\002\000\006\034\uffc7\057\uffc7\001\002\000\004\061\135" +
    "\001\002\000\040\002\uffdc\007\uffdc\011\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\061\uffdc\001\002\000\040\002" +
    "\uffee\007\uffee\011\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\023\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\061\uffee\001\002\000\006\013\142\017\141\001\002" +
    "\000\004\007\143\001\002\000\004\007\uffca\001\002\000" +
    "\004\007\uffcb\001\002\000\004\043\144\001\002\000\024" +
    "\004\041\005\045\006\042\007\050\010\046\020\043\021" +
    "\047\036\044\056\051\001\002\000\016\033\146\035\075" +
    "\036\067\037\072\040\064\042\063\001\002\000\026\004" +
    "\041\005\045\006\042\007\050\010\046\020\043\021\047" +
    "\036\044\055\054\056\051\001\002\000\010\033\150\053" +
    "\057\054\060\001\002\000\006\063\151\064\152\001\002" +
    "\000\004\057\uffc9\001\002\000\004\057\uffc8\001\002\000" +
    "\004\057\154\001\002\000\004\060\155\001\002\000\032" +
    "\007\034\011\004\013\024\014\023\015\030\016\033\017" +
    "\010\023\007\024\026\026\020\031\031\061\ufffe\001\002" +
    "\000\004\061\157\001\002\000\040\002\uffcc\007\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\061\uffcc\001" +
    "\002\000\026\004\041\005\045\006\042\007\050\010\046" +
    "\020\043\021\047\036\044\055\054\056\051\001\002\000" +
    "\010\053\057\054\060\057\162\001\002\000\004\060\163" +
    "\001\002\000\032\007\034\011\004\013\024\014\023\015" +
    "\030\016\033\017\010\023\007\024\026\026\020\031\031" +
    "\061\ufffe\001\002\000\004\061\165\001\002\000\042\002" +
    "\uffd6\007\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\023\uffd6\024\uffd6\025\167\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\061\uffd6\001\002\000\040\002\uffd8\007\uffd8" +
    "\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\023" +
    "\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\061\uffd8" +
    "\001\002\000\004\060\170\001\002\000\032\007\034\011" +
    "\004\013\024\014\023\015\030\016\033\017\010\023\007" +
    "\024\026\026\020\031\031\061\ufffe\001\002\000\004\061" +
    "\172\001\002\000\040\002\uffd7\007\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\061\uffd7\001\002\000\004" +
    "\002\001\001\002\000\024\004\041\005\045\006\042\007" +
    "\050\010\046\020\043\021\047\036\044\056\051\001\002" +
    "\000\016\035\075\036\067\037\072\040\064\042\063\057" +
    "\176\001\002\000\004\060\177\001\002\000\004\027\202" +
    "\001\002\000\010\027\uffd3\030\uffd3\061\uffd3\001\002\000" +
    "\010\027\202\030\213\061\uffd0\001\002\000\010\005\204" +
    "\006\203\007\205\001\002\000\004\062\uffcd\001\002\000" +
    "\004\062\uffce\001\002\000\004\062\uffcf\001\002\000\004" +
    "\062\207\001\002\000\036\007\034\011\004\013\024\014" +
    "\023\015\030\016\033\017\010\023\007\024\026\026\020" +
    "\027\ufffe\030\ufffe\031\031\061\ufffe\001\002\000\010\027" +
    "\uffd2\030\uffd2\061\uffd2\001\002\000\010\027\uffd4\030\uffd4" +
    "\061\uffd4\001\002\000\004\061\216\001\002\000\004\062" +
    "\214\001\002\000\032\007\034\011\004\013\024\014\023" +
    "\015\030\016\033\017\010\023\007\024\026\026\020\031" +
    "\031\061\ufffe\001\002\000\004\061\uffd1\001\002\000\040" +
    "\002\uffd5\007\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\061\uffd5\001\002\000\012\033\uffe5\034\uffe5\043" +
    "\uffe5\056\227\001\002\000\010\033\uffdf\034\221\043\223" +
    "\001\002\000\004\007\226\001\002\000\004\033\225\001" +
    "\002\000\024\004\041\005\045\006\042\007\050\010\046" +
    "\020\043\021\047\036\044\056\051\001\002\000\016\033" +
    "\uffe0\035\075\036\067\037\072\040\064\042\063\001\002" +
    "\000\040\002\uffe7\007\uffe7\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\061\uffe7\001\002\000\010\033\uffe6\034" +
    "\uffe6\043\uffe6\001\002\000\020\007\124\013\024\014\023" +
    "\015\030\017\010\034\uffc5\057\uffc5\001\002\000\006\034" +
    "\131\057\231\001\002\000\004\060\232\001\002\000\004" +
    "\061\233\001\002\000\040\002\uffdd\007\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\061\uffdd\001\002\000" +
    "\040\002\ufffd\007\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\061\ufffd\001\002\000\040\002\ufffc\007\ufffc" +
    "\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\023" +
    "\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\061\ufffc" +
    "\001\002\000\040\002\ufff9\007\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\023\ufff9\024\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\061\ufff9\001\002\000\040\002" +
    "\ufffa\007\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\023\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\061\ufffa\001\002\000\040\002\ufff5\007\ufff5\011\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\023\ufff5\024" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\061\ufff5\001\002" +
    "\000\040\002\ufff6\007\ufff6\011\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\023\ufff6\024\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\061\ufff6\001\002\000\040\002\ufff3\007" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\023\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\061" +
    "\ufff3\001\002\000\040\002\ufffb\007\ufffb\011\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\023\ufffb\024\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\061\ufffb\001\002\000\040" +
    "\002\ufff8\007\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\061\ufff8\001\002\000\040\002\ufff4\007\ufff4\011" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\023\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\061\ufff4\001" +
    "\002\000\004\033\247\001\002\000\040\002\ufff7\007\ufff7" +
    "\011\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\023" +
    "\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\061\ufff7" +
    "\001\002\000\016\033\252\035\075\036\067\037\072\040" +
    "\064\042\063\001\002\000\040\002\uffda\007\uffda\011\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\061\uffda\001\002" +
    "\000\040\002\uffd9\007\uffd9\011\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\061\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\036\002\020\003\012\004\010\005\016\006" +
    "\004\011\031\017\021\020\011\021\024\022\005\024\013" +
    "\025\014\027\026\036\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\037\031\247" +
    "\001\001\000\002\001\001\000\030\005\016\006\234\011" +
    "\245\017\242\020\236\021\243\022\235\024\240\025\237" +
    "\027\244\036\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\037\012\110\031" +
    "\107\001\001\000\006\011\037\031\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\037\031\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\037\014\054\015\051\031\052" +
    "\001\001\000\002\001\001\000\004\013\064\001\001\000" +
    "\012\011\037\014\054\015\055\031\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\037\014\054\015" +
    "\061\031\052\001\001\000\012\011\037\014\054\015\060" +
    "\031\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\037\031\103\001\001\000\006\011\037\031\102" +
    "\001\001\000\006\011\037\031\101\001\001\000\002\001" +
    "\001\000\006\011\037\031\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\037\031\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\037\031\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\037\031\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\125\023\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\037\031\144\001\001\000\002\001\001\000\012\011\037" +
    "\014\054\015\146\031\052\001\001\000\002\001\001\000" +
    "\004\037\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\155\004" +
    "\010\005\016\006\004\011\031\017\021\020\011\021\024" +
    "\022\005\024\013\025\014\027\026\036\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\037\014\054" +
    "\015\160\031\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\163\004\010\005\016\006\004\011\031" +
    "\017\021\020\011\021\024\022\005\024\013\025\014\027" +
    "\026\036\015\001\001\000\002\001\001\000\004\026\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\170\004\010\005\016\006\004\011\031\017\021\020\011" +
    "\021\024\022\005\024\013\025\014\027\026\036\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\037\031\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\200\032\177\001\001\000\002" +
    "\001\001\000\006\032\210\034\211\001\001\000\004\033" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\207\004\010\005" +
    "\016\006\004\011\031\017\021\020\011\021\024\022\005" +
    "\024\013\025\014\027\026\036\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\214\004\010\005\016\006\004\011\031\017" +
    "\021\020\011\021\024\022\005\024\013\025\014\027\026" +
    "\036\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\037\031\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\125\023\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public static Nodo padre;
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.err.println("ERROR R: ");
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("ERROR N_R: ");
        System.err.println(s);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAR ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS1 ::= SENTENCIAS1 _importar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS1 ::= SENTENCIAS1 DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS1 ::= SENTENCIAS1 ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS1 ::= SENTENCIAS1 FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS1 ::= SENTENCIAS1 METODOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS1 ::= SENTENCIAS1 PRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS1 ::= SENTENCIAS1 LLAMADAS_FUNC ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS1 ::= SENTENCIAS1 RETORNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS1 ::= SENTENCIAS1 SENT_ES_VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS1 ::= SENTENCIAS1 CAMBIAR_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS1 ::= SENTENCIAS1 PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS1 ::= PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS1 ::= SENT_ES_VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS1 ::= CAMBIAR_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS1 ::= RETORNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS1 ::= LLAMADAS_FUNC ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS1 ::= PRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS1 ::= METODOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS1 ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS1 ::= _importar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS1 ::= ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS1 ::= DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_VARIABLES ::= TIPO LISTA_VARIABLES ASIGN_VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_VARIABLES ::= LISTA_VARIABLES coma identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_VARIABLES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LLAMADAS_FUNC ::= identificador parent_a LISTA_LLAMADA_FUNC parent_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS_FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_LLAMADA_FUNC ::= LISTA_LLAMADA_FUNC coma EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_LLAMADA_FUNC ::= EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_LLAMADA_FUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGN_VARIABLES ::= asignacion EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGN_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACIONES ::= identificador asignacion EXPR_ARIT ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES ::= TIPO identificador parent_a LISTA_PARAMETROS parent_c llave_a llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOS ::= _vacio identificador parent_a LISTA_PARAMETROS parent_c llave_a llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINCIPAL ::= _vacio _principal parent_a parent_c llave_a llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RETORNO ::= _retorno ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETORNO ::= _retorno EXPR_ARIT ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT_ES_VERDADERO ::= _esVerdadero parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c ES_VERD_CON_FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_ES_VERDADERO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ES_VERD_CON_FALSO ::= _esFalso llave_a SENTENCIAS llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_VERD_CON_FALSO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ES_VERD_CON_FALSO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_VERD_CON_FALSO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAMBIAR_A ::= _cambiarA parent_a EXPR_ARIT parent_c llave_a CASOS NO_CUMPLE llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMBIAR_A",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASOS ::= CASOS LISTA_CASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASOS ::= LISTA_CASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_CASOS ::= _valor VALORES_CASE dosPtos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NO_CUMPLE ::= _noCumple dosPtos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NO_CUMPLE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NO_CUMPLE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NO_CUMPLE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALORES_CASE ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORES_CASE ::= numEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORES_CASE ::= numDecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARA ::= _para parent_a VALORES_PARA identificador asignacion EXPR_ARIT ptoYcoma EXPR_LOGICA ptoYcoma ITERADOR parent_c llave_a SENTENCIAS llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALORES_PARA ::= _decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_PARA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALORES_PARA ::= _entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_PARA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ITERADOR ::= incremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ITERADOR ::= decremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR_LOGICA ::= EXPR_LOGICA or EXPR_LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR_LOGICA ::= EXPR_LOGICA and EXPR_LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPR_LOGICA ::= not EXPR_LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPR_LOGICA ::= EXPR_REL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPR_REL ::= EXPR_ARIT OP_REL EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_REL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPR_REL ::= EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_REL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_REL ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_REL ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_REL ::= menorQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_REL ::= mayorQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_REL ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_REL ::= diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPR_ARIT ::= EXPR_ARIT mas EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPR_ARIT ::= EXPR_ARIT menos EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPR_ARIT ::= EXPR_ARIT por EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPR_ARIT ::= EXPR_ARIT div EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPR_ARIT ::= EXPR_ARIT potencia EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPR_ARIT ::= numEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPR_ARIT ::= numDecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPR_ARIT ::= menos EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR_ARIT ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPR_ARIT ::= _verdadero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR_ARIT ::= _falso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR_ARIT ::= caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR_ARIT ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR_ARIT ::= LLAMADAS_FUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR_ARIT ::= parent_a EXPR_LOGICA parent_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= _decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= _booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= _texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= _entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
