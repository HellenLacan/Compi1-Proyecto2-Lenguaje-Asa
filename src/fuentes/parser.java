
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\006\006\000\002\007\005\000\002" +
    "\007\003\000\002\011\006\000\002\012\005\000\002\012" +
    "\003\000\002\012\002\000\002\010\004\000\002\010\002" +
    "\000\002\017\006\000\002\020\011\000\002\022\011\000" +
    "\002\021\010\000\002\024\004\000\002\024\005\000\002" +
    "\025\012\000\002\026\006\000\002\026\002\000\002\027" +
    "\012\000\002\030\004\000\002\030\003\000\002\032\006" +
    "\000\002\034\005\000\002\034\002\000\002\042\004\000" +
    "\002\043\004\000\002\044\007\000\002\044\006\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\036" +
    "\020\000\002\035\003\000\002\035\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\011\000\002\041\011\000" +
    "\002\023\006\000\002\023\004\000\002\023\002\000\002" +
    "\015\005\000\002\015\005\000\002\015\004\000\002\015" +
    "\003\000\002\014\005\000\002\014\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\004" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\044\002\ufffe\007\046\011\006\013\032\014" +
    "\030\015\037\016\045\017\012\023\013\024\034\026\023" +
    "\031\036\032\044\033\040\034\004\035\027\036\022\001" +
    "\002\000\004\041\315\001\002\000\052\002\uffe9\007\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\023" +
    "\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\067\uffe9\001\002\000" +
    "\052\002\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\067\uffe0\001\002\000\052\002\uffde\007\uffde\011\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\023\uffde\024\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\067\uffde\001\002\000\052\002\uffec" +
    "\007\uffec\011\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\067\uffec\001" +
    "\002\000\052\002\uffe2\007\uffe2\011\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\023\uffe2\024\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\067\uffe2\001\002\000\004\007\uff96\001\002\000" +
    "\026\004\053\005\057\006\054\007\062\010\060\020\055" +
    "\021\061\041\313\044\056\064\063\001\002\000\052\002" +
    "\uffff\007\046\011\272\013\032\014\030\015\037\016\045" +
    "\017\012\023\013\024\034\026\023\027\uffff\030\uffff\031" +
    "\036\032\044\033\040\034\004\035\027\036\022\067\uffff" +
    "\001\002\000\052\002\uffe1\007\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\067\uffe1\001\002\000\004\002\000\001\002" +
    "\000\052\002\uffe7\007\uffe7\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\067\uffe7\001\002\000\052\002\uffe5\007\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\023\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\067\uffe5\001\002\000\052\002" +
    "\uffe8\007\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\067\uffe8" +
    "\001\002\000\004\064\263\001\002\000\004\064\240\001" +
    "\002\000\004\007\223\001\002\000\004\002\222\001\002" +
    "\000\052\002\uffdf\007\uffdf\011\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\067\uffdf\001\002\000\004\041\221\001\002\000\004" +
    "\007\uff98\001\002\000\052\002\uffed\007\uffed\011\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\023\uffed\024\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\067\uffed\001\002\000\004\007\uff99" +
    "\001\002\000\052\002\uffe3\007\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\067\uffe3\001\002\000\004\064\206\001\002" +
    "\000\052\002\uffe6\007\uffe6\011\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\067\uffe6\001\002\000\004\064\165\001\002\000\004" +
    "\007\uff97\001\002\000\004\064\157\001\002\000\004\041" +
    "\156\001\002\000\052\002\uffeb\007\uffeb\011\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\067\uffeb\001\002\000\052\002\uffea\007" +
    "\uffea\011\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\067\uffea\001\002" +
    "\000\004\064\150\001\002\000\006\007\127\022\130\001" +
    "\002\000\010\007\uff95\051\050\064\047\001\002\000\030" +
    "\004\053\005\057\006\054\007\062\010\060\020\055\021" +
    "\061\042\uffd7\044\056\064\063\065\uffd7\001\002\000\024" +
    "\004\053\005\057\006\054\007\062\010\060\020\055\021" +
    "\061\044\056\064\063\001\002\000\016\041\121\043\106" +
    "\044\101\045\104\046\076\050\075\001\002\000\042\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\061" +
    "\uff9b\062\uff9b\065\uff9b\001\002\000\042\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\061\uff9c\062\uff9c" +
    "\065\uff9c\001\002\000\042\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2\065\uffa2\001" +
    "\002\000\042\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\061\uff9f\062\uff9f\065\uff9f\001\002\000\024" +
    "\004\053\005\057\006\054\007\062\010\060\020\055\021" +
    "\061\044\056\064\063\001\002\000\042\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3" +
    "\065\uffa3\001\002\000\042\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\050\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\061\uff9d\062\uff9d\065\uff9d\001" +
    "\002\000\042\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\061\uff9e\062\uff9e\065\uff9e\001\002\000\044" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\061\uffa0\062\uffa0\064\047\065\uffa0\001\002\000\026\004" +
    "\053\005\057\006\054\007\062\010\060\020\055\021\061" +
    "\044\056\063\066\064\063\001\002\000\010\061\071\062" +
    "\072\065\117\001\002\000\040\041\uffaf\043\106\044\101" +
    "\045\104\046\076\050\075\052\110\053\103\054\102\055" +
    "\105\056\107\057\100\061\uffaf\062\uffaf\065\uffaf\001\002" +
    "\000\026\004\053\005\057\006\054\007\062\010\060\020" +
    "\055\021\061\044\056\063\066\064\063\001\002\000\012" +
    "\041\uffb1\061\uffb1\062\uffb1\065\uffb1\001\002\000\012\041" +
    "\uffb2\061\uffb2\062\uffb2\065\uffb2\001\002\000\026\004\053" +
    "\005\057\006\054\007\062\010\060\020\055\021\061\044" +
    "\056\063\066\064\063\001\002\000\026\004\053\005\057" +
    "\006\054\007\062\010\060\020\055\021\061\044\056\063" +
    "\066\064\063\001\002\000\012\041\uffb4\061\071\062\uffb4" +
    "\065\uffb4\001\002\000\012\041\uffb3\061\uffb3\062\uffb3\065" +
    "\uffb3\001\002\000\024\004\053\005\057\006\054\007\062" +
    "\010\060\020\055\021\061\044\056\064\063\001\002\000" +
    "\024\004\053\005\057\006\054\007\062\010\060\020\055" +
    "\021\061\044\056\064\063\001\002\000\024\004\053\005" +
    "\057\006\054\007\062\010\060\020\055\021\061\044\056" +
    "\064\063\001\002\000\024\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\020\uffab\021\uffab\044\uffab\064\uffab\001\002" +
    "\000\024\004\053\005\057\006\054\007\062\010\060\020" +
    "\055\021\061\044\056\064\063\001\002\000\024\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\020\uffad\021\uffad\044" +
    "\uffad\064\uffad\001\002\000\024\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\020\uffa9\021\uffa9\044\uffa9\064\uffa9\001" +
    "\002\000\024\004\053\005\057\006\054\007\062\010\060" +
    "\020\055\021\061\044\056\064\063\001\002\000\024\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\010\uffac\020\uffac\021\uffac" +
    "\044\uffac\064\uffac\001\002\000\024\004\053\005\057\006" +
    "\054\007\062\010\060\020\055\021\061\044\056\064\063" +
    "\001\002\000\024\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\020\uffae\021\uffae\044\uffae\064\uffae\001\002\000\024" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\020\uffaa\021" +
    "\uffaa\044\uffaa\064\uffaa\001\002\000\042\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\104\046\076\050\075\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062\uffa8" +
    "\065\uffa8\001\002\000\042\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\050\075\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6\065\uffa6\001" +
    "\002\000\042\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\104" +
    "\046\076\050\075\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\061\uffa7\062\uffa7\065\uffa7\001\002\000\024" +
    "\041\uffb0\043\106\044\101\045\104\046\076\050\075\061" +
    "\uffb0\062\uffb0\065\uffb0\001\002\000\042\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\075\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\061\uffa5\062\uffa5" +
    "\065\uffa5\001\002\000\042\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\050\075\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4\065\uffa4\001" +
    "\002\000\042\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\050\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\061\uff9a\062\uff9a\065\uff9a\001\002\000\042" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\104\046\076\050" +
    "\075\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\061\uffa1\062\uffa1\065\uffa1\001\002\000\052\002\uffd4\007" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\067\uffd4\001\002" +
    "\000\020\042\uffd8\043\106\044\101\045\104\046\076\050" +
    "\075\065\uffd8\001\002\000\006\042\125\065\124\001\002" +
    "\000\042\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\050\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\061\uffda\062\uffda\065\uffda\001\002\000\024\004" +
    "\053\005\057\006\054\007\062\010\060\020\055\021\061" +
    "\044\056\064\063\001\002\000\020\042\uffd9\043\106\044" +
    "\101\045\104\046\076\050\075\065\uffd9\001\002\000\004" +
    "\064\135\001\002\000\004\064\131\001\002\000\004\065" +
    "\132\001\002\000\004\066\133\001\002\000\004\067\134" +
    "\001\002\000\052\002\uffd1\007\uffd1\011\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\067\uffd1\001\002\000\020\007\136\013\032" +
    "\014\030\015\037\017\012\042\uffb5\065\uffb5\001\002\000" +
    "\004\007\uff95\001\002\000\006\042\143\065\142\001\002" +
    "\000\004\007\141\001\002\000\006\042\uffb6\065\uffb6\001" +
    "\002\000\004\066\146\001\002\000\014\007\136\013\032" +
    "\014\030\015\037\017\012\001\002\000\004\007\145\001" +
    "\002\000\006\042\uffb7\065\uffb7\001\002\000\004\067\147" +
    "\001\002\000\052\002\uffd2\007\uffd2\011\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\067\uffd2\001\002\000\026\004\053\005\057" +
    "\006\054\007\062\010\060\020\055\021\061\044\056\063" +
    "\066\064\063\001\002\000\010\061\071\062\072\065\152" +
    "\001\002\000\004\066\153\001\002\000\044\007\046\011" +
    "\006\013\032\014\030\015\037\016\045\017\012\023\013" +
    "\024\034\026\023\031\036\032\044\033\040\034\004\035" +
    "\027\036\022\067\ufffe\001\002\000\004\067\155\001\002" +
    "\000\052\002\uffb9\007\uffb9\011\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\067\uffb9\001\002\000\052\002\uffe4\007\uffe4\011\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\023\uffe4\024" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\067\uffe4\001\002\000\026\004" +
    "\053\005\057\006\054\007\062\010\060\020\055\021\061" +
    "\044\056\063\066\064\063\001\002\000\010\061\071\062" +
    "\072\065\161\001\002\000\004\066\162\001\002\000\044" +
    "\007\046\011\006\013\032\014\030\015\037\016\045\017" +
    "\012\023\013\024\034\026\023\031\036\032\044\033\040" +
    "\034\004\035\027\036\022\067\ufffe\001\002\000\004\067" +
    "\164\001\002\000\052\002\uffb8\007\uffb8\011\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\023\uffb8\024\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\067\uffb8\001\002\000\006\013\170\017" +
    "\167\001\002\000\004\007\171\001\002\000\004\007\uffbc" +
    "\001\002\000\004\007\uffbd\001\002\000\004\051\172\001" +
    "\002\000\024\004\053\005\057\006\054\007\062\010\060" +
    "\020\055\021\061\044\056\064\063\001\002\000\016\041" +
    "\174\043\106\044\101\045\104\046\076\050\075\001\002" +
    "\000\026\004\053\005\057\006\054\007\062\010\060\020" +
    "\055\021\061\044\056\063\066\064\063\001\002\000\010" +
    "\041\176\061\071\062\072\001\002\000\006\071\177\072" +
    "\200\001\002\000\004\065\uffbb\001\002\000\004\065\uffba" +
    "\001\002\000\004\065\202\001\002\000\004\066\203\001" +
    "\002\000\044\007\046\011\006\013\032\014\030\015\037" +
    "\016\045\017\012\023\013\024\034\026\023\031\036\032" +
    "\044\033\040\034\004\035\027\036\022\067\ufffe\001\002" +
    "\000\004\067\205\001\002\000\052\002\uffbe\007\uffbe\011" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\023\uffbe" +
    "\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\067\uffbe\001\002\000\026" +
    "\004\053\005\057\006\054\007\062\010\060\020\055\021" +
    "\061\044\056\063\066\064\063\001\002\000\010\061\071" +
    "\062\072\065\210\001\002\000\004\066\211\001\002\000" +
    "\044\007\046\011\006\013\032\014\030\015\037\016\045" +
    "\017\012\023\013\024\034\026\023\031\036\032\044\033" +
    "\040\034\004\035\027\036\022\067\ufffe\001\002\000\004" +
    "\067\213\001\002\000\054\002\uffcc\007\uffcc\011\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\023\uffcc\024\uffcc" +
    "\025\215\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\067\uffcc\001\002\000\052" +
    "\002\uffce\007\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\067" +
    "\uffce\001\002\000\004\066\216\001\002\000\044\007\046" +
    "\011\006\013\032\014\030\015\037\016\045\017\012\023" +
    "\013\024\034\026\023\031\036\032\044\033\040\034\004" +
    "\035\027\036\022\067\ufffe\001\002\000\004\067\220\001" +
    "\002\000\052\002\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\023\uffcd\024\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\067\uffcd\001\002\000\052\002\uffc4\007\uffc4\011" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\067\uffc4\001\002\000\004" +
    "\002\001\001\002\000\012\041\uffdb\042\uffdb\051\uffdb\064" +
    "\233\001\002\000\010\041\uffd5\042\225\051\227\001\002" +
    "\000\004\007\232\001\002\000\004\041\231\001\002\000" +
    "\024\004\053\005\057\006\054\007\062\010\060\020\055" +
    "\021\061\044\056\064\063\001\002\000\016\041\uffd6\043" +
    "\106\044\101\045\104\046\076\050\075\001\002\000\052" +
    "\002\uffdd\007\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\067" +
    "\uffdd\001\002\000\010\041\uffdc\042\uffdc\051\uffdc\001\002" +
    "\000\020\007\136\013\032\014\030\015\037\017\012\042" +
    "\uffb5\065\uffb5\001\002\000\006\042\143\065\235\001\002" +
    "\000\004\066\236\001\002\000\004\067\237\001\002\000" +
    "\052\002\uffd3\007\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\067\uffd3\001\002\000\024\004\053\005\057\006\054\007" +
    "\062\010\060\020\055\021\061\044\056\064\063\001\002" +
    "\000\016\043\106\044\101\045\104\046\076\050\075\065" +
    "\242\001\002\000\004\066\243\001\002\000\004\027\246" +
    "\001\002\000\010\027\uffc9\030\uffc9\067\uffc9\001\002\000" +
    "\010\027\246\030\257\067\uffc6\001\002\000\010\005\250" +
    "\006\247\007\251\001\002\000\004\070\uffbf\001\002\000" +
    "\004\070\uffc0\001\002\000\004\070\uffc1\001\002\000\004" +
    "\070\253\001\002\000\050\007\046\011\006\013\032\014" +
    "\030\015\037\016\045\017\012\023\013\024\034\026\023" +
    "\027\ufffe\030\ufffe\031\036\032\044\033\040\034\004\035" +
    "\027\036\022\067\ufffe\001\002\000\010\027\uffc8\030\uffc8" +
    "\067\uffc8\001\002\000\010\027\uffca\030\uffca\067\uffca\001" +
    "\002\000\004\067\262\001\002\000\004\070\260\001\002" +
    "\000\044\007\046\011\006\013\032\014\030\015\037\016" +
    "\045\017\012\023\013\024\034\026\023\031\036\032\044" +
    "\033\040\034\004\035\027\036\022\067\ufffe\001\002\000" +
    "\004\067\uffc7\001\002\000\052\002\uffcb\007\uffcb\011\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\023\uffcb\024" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\067\uffcb\001\002\000\026\004" +
    "\053\005\057\006\054\007\062\010\060\020\055\021\061" +
    "\044\056\064\063\065\265\001\002\000\016\043\106\044" +
    "\101\045\104\046\076\050\075\065\267\001\002\000\004" +
    "\041\266\001\002\000\052\002\uffc2\007\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\023\uffc2\024\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\067\uffc2\001\002\000\004\041\270" +
    "\001\002\000\052\002\uffc3\007\uffc3\011\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\023\uffc3\024\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\067\uffc3\001\002\000\052\002\ufff1\007\ufff1" +
    "\011\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\023" +
    "\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\067\ufff1\001\002\000" +
    "\052\002\ufffd\007\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\067\ufffd\001\002\000\052\002\ufff0\007\ufff0\011\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\023\ufff0\024\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\067\ufff0\001\002\000\052\002\ufffc" +
    "\007\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\023\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\067\ufffc\001" +
    "\002\000\052\002\ufff9\007\ufff9\011\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\023\ufff9\024\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\067\ufff9\001\002\000\052\002\ufffa\007\ufffa\011" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\023\ufffa" +
    "\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\067\ufffa\001\002\000\052" +
    "\002\ufff5\007\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\067" +
    "\ufff5\001\002\000\052\002\ufff6\007\ufff6\011\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\023\ufff6\024\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\067\ufff6\001\002\000\052\002\ufff3\007" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\023\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\067\ufff3\001\002" +
    "\000\052\002\ufffb\007\ufffb\011\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\023\ufffb\024\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\067\ufffb\001\002\000\052\002\uffee\007\uffee\011\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\023\uffee\024" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\067\uffee\001\002\000\052\002" +
    "\ufff8\007\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\067\ufff8" +
    "\001\002\000\052\002\ufff4\007\ufff4\011\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\023\ufff4\024\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\067\ufff4\001\002\000\004\041\311\001\002" +
    "\000\052\002\uffef\007\uffef\011\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\023\uffef\024\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\067\uffef\001\002\000\052\002\ufff2\007\ufff2\011\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\023\ufff2\024" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\067\ufff2\001\002\000\052\002" +
    "\ufff7\007\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\067\ufff7" +
    "\001\002\000\016\041\314\043\106\044\101\045\104\046" +
    "\076\050\075\001\002\000\052\002\uffd0\007\uffd0\011\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\067\uffd0\001\002\000\052\002" +
    "\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\067\uffcf" +
    "\001\002\000\052\002\uffc5\007\uffc5\011\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\023\uffc5\024\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\067\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\050\002\024\003\015\004\013\005\023\006" +
    "\006\011\040\017\025\020\014\021\032\022\010\024\017" +
    "\025\016\027\034\036\020\040\042\041\004\042\007\043" +
    "\041\044\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\051\031\311" +
    "\001\001\000\042\005\023\006\273\011\305\017\301\020" +
    "\275\021\303\022\274\024\277\025\276\027\304\036\300" +
    "\040\307\041\270\042\272\043\306\044\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\051\012\122\031\121\001\001\000\006" +
    "\011\051\031\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\051\031\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\051\014\066\015\063\031\064\001\001\000\002\001" +
    "\001\000\004\013\076\001\001\000\012\011\051\014\066" +
    "\015\067\031\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\051\014\066\015\073\031\064\001\001" +
    "\000\012\011\051\014\066\015\072\031\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\051\031\115" +
    "\001\001\000\006\011\051\031\114\001\001\000\006\011" +
    "\051\031\113\001\001\000\002\001\001\000\006\011\051" +
    "\031\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\051\031\111\001\001\000\002\001\001\000\006" +
    "\011\051\031\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\051\031\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\137\023\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\051\014\066\015\150" +
    "\031\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\153\004\013\005\023\006\006\011\040\017\025" +
    "\020\014\021\032\022\010\024\017\025\016\027\034\036" +
    "\020\040\042\041\004\042\007\043\041\044\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\051\014\066\015\157\031\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\162\004\013\005" +
    "\023\006\006\011\040\017\025\020\014\021\032\022\010" +
    "\024\017\025\016\027\034\036\020\040\042\041\004\042" +
    "\007\043\041\044\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\051\031\172\001\001\000\002\001\001\000\012\011" +
    "\051\014\066\015\174\031\064\001\001\000\002\001\001" +
    "\000\004\037\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\203" +
    "\004\013\005\023\006\006\011\040\017\025\020\014\021" +
    "\032\022\010\024\017\025\016\027\034\036\020\040\042" +
    "\041\004\042\007\043\041\044\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\051\014\066\015\206" +
    "\031\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\211\004\013\005\023\006\006\011\040\017\025" +
    "\020\014\021\032\022\010\024\017\025\016\027\034\036" +
    "\020\040\042\041\004\042\007\043\041\044\030\001\001" +
    "\000\002\001\001\000\004\026\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\216\004\013\005\023" +
    "\006\006\011\040\017\025\020\014\021\032\022\010\024" +
    "\017\025\016\027\034\036\020\040\042\041\004\042\007" +
    "\043\041\044\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\051\031\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\137\023" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\051\031\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\244" +
    "\032\243\001\001\000\002\001\001\000\006\032\254\034" +
    "\255\001\001\000\004\033\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\253\004\013\005\023\006\006\011\040\017\025" +
    "\020\014\021\032\022\010\024\017\025\016\027\034\036" +
    "\020\040\042\041\004\042\007\043\041\044\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\260\004\013\005\023\006\006" +
    "\011\040\017\025\020\014\021\032\022\010\024\017\025" +
    "\016\027\034\036\020\040\042\041\004\042\007\043\041" +
    "\044\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\051\031\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public static Nodo padre;
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.err.println("ERROR R: ");
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("ERROR N_R: ");
        System.err.println(s);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAR ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS1 ::= SENTENCIAS1 _importar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS1 ::= SENTENCIAS1 DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS1 ::= SENTENCIAS1 ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS1 ::= SENTENCIAS1 FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS1 ::= SENTENCIAS1 METODOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS1 ::= SENTENCIAS1 PRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS1 ::= SENTENCIAS1 LLAMADAS_FUNC ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS1 ::= SENTENCIAS1 RETORNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS1 ::= SENTENCIAS1 SENT_ES_VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS1 ::= SENTENCIAS1 CAMBIAR_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS1 ::= SENTENCIAS1 PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS1 ::= SENTENCIAS1 HASTA_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS1 ::= SENTENCIAS1 MIENTRAS_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS1 ::= SENTENCIAS1 ROMPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS1 ::= SENTENCIAS1 CONTINUAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS1 ::= SENTENCIAS1 MOSTRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS1 ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS1 ::= ROMPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS1 ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS1 ::= HASTA_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS1 ::= MIENTRAS_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS1 ::= PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS1 ::= SENT_ES_VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS1 ::= CAMBIAR_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS1 ::= RETORNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS1 ::= LLAMADAS_FUNC ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS1 ::= PRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS1 ::= METODOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS1 ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS1 ::= _importar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS1 ::= ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS1 ::= DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_VARIABLES ::= TIPO LISTA_VARIABLES ASIGN_VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_VARIABLES ::= LISTA_VARIABLES coma identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_VARIABLES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADAS_FUNC ::= identificador parent_a LISTA_LLAMADA_FUNC parent_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS_FUNC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_LLAMADA_FUNC ::= LISTA_LLAMADA_FUNC coma EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_LLAMADA_FUNC ::= EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_LLAMADA_FUNC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA_FUNC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGN_VARIABLES ::= asignacion EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGN_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACIONES ::= identificador asignacion EXPR_ARIT ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONES ::= TIPO identificador parent_a LISTA_PARAMETROS parent_c llave_a llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODOS ::= _vacio identificador parent_a LISTA_PARAMETROS parent_c llave_a llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRINCIPAL ::= _vacio _principal parent_a parent_c llave_a llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETORNO ::= _retorno ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNO ::= _retorno EXPR_ARIT ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT_ES_VERDADERO ::= _esVerdadero parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c ES_VERD_CON_FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_ES_VERDADERO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ES_VERD_CON_FALSO ::= _esFalso llave_a SENTENCIAS llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_VERD_CON_FALSO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ES_VERD_CON_FALSO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_VERD_CON_FALSO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CAMBIAR_A ::= _cambiarA parent_a EXPR_ARIT parent_c llave_a CASOS NO_CUMPLE llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMBIAR_A",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASOS ::= CASOS LISTA_CASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASOS ::= LISTA_CASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_CASOS ::= _valor VALORES_CASE dosPtos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NO_CUMPLE ::= _noCumple dosPtos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NO_CUMPLE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NO_CUMPLE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NO_CUMPLE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ROMPER ::= _romper ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROMPER",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTINUAR ::= _continuar ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUAR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MOSTRAR ::= _mostrar parent_a EXPR_ARIT parent_c ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MOSTRAR ::= _mostrar parent_a parent_c ptoYcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES_CASE ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES_CASE ::= numEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES_CASE ::= numDecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARA ::= _para parent_a VALORES_PARA identificador asignacion EXPR_ARIT ptoYcoma EXPR_LOGICA ptoYcoma ITERADOR parent_c llave_a SENTENCIAS llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES_PARA ::= _decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_PARA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES_PARA ::= _entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_PARA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ITERADOR ::= incremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ITERADOR ::= decremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // HASTA_QUE ::= _hastaQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HASTA_QUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MIENTRAS_QUE ::= _mientrasQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIENTRAS_QUE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPR_LOGICA ::= EXPR_LOGICA or EXPR_LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPR_LOGICA ::= EXPR_LOGICA and EXPR_LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPR_LOGICA ::= not EXPR_LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPR_LOGICA ::= EXPR_REL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_LOGICA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR_REL ::= EXPR_ARIT OP_REL EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_REL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPR_REL ::= EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_REL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_REL ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_REL ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_REL ::= menorQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_REL ::= mayorQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_REL ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_REL ::= diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR_ARIT ::= EXPR_ARIT mas EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR_ARIT ::= EXPR_ARIT menos EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR_ARIT ::= EXPR_ARIT por EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPR_ARIT ::= EXPR_ARIT div EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPR_ARIT ::= EXPR_ARIT potencia EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR_ARIT ::= numEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR_ARIT ::= numDecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR_ARIT ::= menos EXPR_ARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR_ARIT ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR_ARIT ::= _verdadero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR_ARIT ::= _falso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR_ARIT ::= caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR_ARIT ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPR_ARIT ::= LLAMADAS_FUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPR_ARIT ::= parent_a EXPR_LOGICA parent_c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_ARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO ::= _decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= _booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= _texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= _entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
