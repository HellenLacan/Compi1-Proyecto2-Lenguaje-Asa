package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible
    
    public static Nodo padre;
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.err.println("ERROR R: ");
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("ERROR N_R: ");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.
:}

terminal cadena, numEntero, numDecimal, identificador, caracter;
terminal _importar, _definir, _decimal, _booleano, _texto, _vacio, _entero, _verdadero, _falso, _principal, _retorno;
terminal _esVerdadero, _esFalso, _cambiarA, _valor, _noCumple, _para, _hastaQue, _mientrasQue, _romper, _continuar;
terminal _mostrar, _dibujarAst, _dibujarExp, _dibujarTs, _asa;
terminal punto, ptoYcoma, coma, mas, menos, por, div, modular, potencia, asignacion, igual, diferente, menor, menorQ;
terminal mayor, mayorQ, diferencia, and, or, not, parent_a, parent_c, llave_a, llave_c, dosPtos, incremento, decremento;

nonterminal INICIAR, SO, CUERPO_PRINCIPAL, SENTENCIAS, LISTA_SENTENCIAS, TIPO, IMPORTAR, DEFINIR;
nonterminal DECLARACION_VARIABLES, LISTA_VARIABLES, ASIGN_VARIABLES, LLAMADAS_FUNC, LISTA_LLAMADA_FUNC;
nonterminal OP_REL, EXPR_REL, EXPR_LOGICA, TIPO_EXPR, ASIGNACIONES, FUNCIONES, PRINCIPAL;
nonterminal METODOS, LISTA_PARAMETROS, RETORNO, SENT_ES_VERDADERO, ES_VERD_CON_FALSO, CAMBIAR_A, CASOS;
nonterminal EXPR_ARIT, LISTA_CASOS, VALORES_CASE, NO_CUMPLE, VALORES_PARA, PARA, ITERADOR, HASTA_QUE, MIENTRAS_QUE;
nonterminal ROMPER, CONTINUAR, MOSTRAR, DIBUJAR_AST, DIBUJAR_EXP, DIBUJAR_TS;

precedence left or;
precedence left and;
precedence right not;
precedence left menor, menorQ, mayorQ, menorQ, igual, diferente;
precedence left mas, menos;
precedence left por, div; 
precedence right potencia; 
start with INICIAR;

INICIAR::= CUERPO_PRINCIPAL;

CUERPO_PRINCIPAL::= CUERPO_PRINCIPAL DECLARACION_VARIABLES
                   |CUERPO_PRINCIPAL ASIGNACIONES
                   |CUERPO_PRINCIPAL FUNCIONES
                   |CUERPO_PRINCIPAL METODOS
                   |CUERPO_PRINCIPAL PRINCIPAL
                   |CUERPO_PRINCIPAL IMPORTAR
                   |CUERPO_PRINCIPAL DEFINIR
                   |IMPORTAR
                   |DEFINIR
                   |DECLARACION_VARIABLES
                   |ASIGNACIONES
                   |FUNCIONES
                   |METODOS
                   |PRINCIPAL;

SENTENCIAS::= LISTA_SENTENCIAS
             |;

LISTA_SENTENCIAS::=  LISTA_SENTENCIAS DIBUJAR_EXP
                    |LISTA_SENTENCIAS DIBUJAR_TS
                    |LISTA_SENTENCIAS DIBUJAR_AST
                    |LISTA_SENTENCIAS MOSTRAR
                    |LISTA_SENTENCIAS ROMPER
                    |LISTA_SENTENCIAS CONTINUAR
                    |LISTA_SENTENCIAS HASTA_QUE
                    |LISTA_SENTENCIAS MIENTRAS_QUE
                    |LISTA_SENTENCIAS PARA
                    |LISTA_SENTENCIAS SENT_ES_VERDADERO
                    |LISTA_SENTENCIAS CAMBIAR_A
                    |LISTA_SENTENCIAS RETORNO
                    |LISTA_SENTENCIAS LLAMADAS_FUNC ptoYcoma
                    |LISTA_SENTENCIAS ASIGNACIONES
                    |LISTA_SENTENCIAS DECLARACION_VARIABLES
                    |DIBUJAR_EXP
                    |DIBUJAR_TS
                    |DIBUJAR_AST
                    |MOSTRAR
                    |ROMPER
                    |CONTINUAR
                    |HASTA_QUE
                    |MIENTRAS_QUE
                    |PARA
                    |SENT_ES_VERDADERO
                    |CAMBIAR_A
                    |RETORNO
                    |LLAMADAS_FUNC ptoYcoma
                    |ASIGNACIONES
                    |DECLARACION_VARIABLES;

IMPORTAR::=_importar identificador punto _asa ptoYcoma;

DEFINIR::= _definir cadena ptoYcoma;

DECLARACION_VARIABLES::=TIPO LISTA_VARIABLES ASIGN_VARIABLES ptoYcoma;

LISTA_VARIABLES::= LISTA_VARIABLES coma identificador 
                  |identificador;

LLAMADAS_FUNC::= identificador parent_a LISTA_LLAMADA_FUNC parent_c;

LISTA_LLAMADA_FUNC::= LISTA_LLAMADA_FUNC coma EXPR_ARIT
                     |EXPR_ARIT
                     |;

ASIGN_VARIABLES::= asignacion EXPR_ARIT
                  |;

ASIGNACIONES::= identificador asignacion EXPR_ARIT ptoYcoma;

FUNCIONES::= TIPO identificador parent_a LISTA_PARAMETROS parent_c llave_a SENTENCIAS llave_c;

METODOS::= _vacio identificador parent_a LISTA_PARAMETROS parent_c llave_a SENTENCIAS llave_c;

PRINCIPAL::=_vacio _principal parent_a parent_c llave_a llave_c;

RETORNO::= _retorno ptoYcoma
          |_retorno EXPR_ARIT ptoYcoma;

SENT_ES_VERDADERO::= _esVerdadero parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c ES_VERD_CON_FALSO;

ES_VERD_CON_FALSO::= _esFalso llave_a SENTENCIAS llave_c
                    |;

CAMBIAR_A::= _cambiarA parent_a EXPR_ARIT parent_c llave_a CASOS NO_CUMPLE llave_c;

CASOS::= CASOS LISTA_CASOS
        |LISTA_CASOS;

LISTA_CASOS::= _valor VALORES_CASE dosPtos SENTENCIAS;

NO_CUMPLE::=_noCumple dosPtos SENTENCIAS
            |;

VALORES_CASE::= identificador
                |numEntero
                |numDecimal;

PARA::=_para parent_a VALORES_PARA identificador asignacion EXPR_ARIT ptoYcoma EXPR_LOGICA ptoYcoma ITERADOR parent_c llave_a LISTA_SENTENCIAS llave_c; 

VALORES_PARA::= _decimal
               |_entero;

ITERADOR::= incremento
           |decremento;

HASTA_QUE::= _hastaQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c;

MIENTRAS_QUE::= _mientrasQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c;

LISTA_PARAMETROS::= LISTA_PARAMETROS coma TIPO identificador
                   |TIPO identificador
                   |;

ROMPER::= _romper ptoYcoma;

CONTINUAR::=_continuar ptoYcoma;

MOSTRAR::= _mostrar parent_a EXPR_ARIT parent_c ptoYcoma
          |_mostrar parent_a parent_c ptoYcoma;

DIBUJAR_AST::= _dibujarAst parent_a identificador parent_c ptoYcoma;

DIBUJAR_EXP::= _dibujarExp parent_a EXPR_LOGICA parent_c ptoYcoma;

DIBUJAR_TS::= _dibujarTs parent_a parent_c ptoYcoma;

EXPR_LOGICA::= EXPR_LOGICA or EXPR_LOGICA
              |EXPR_LOGICA and EXPR_LOGICA
              |not EXPR_LOGICA
              |EXPR_REL;

EXPR_REL::= EXPR_ARIT OP_REL EXPR_ARIT
           |EXPR_ARIT;

OP_REL::=   mayor
           |menor
           |menorQ
           |mayorQ
           |igual
           |diferente;

EXPR_ARIT::= EXPR_ARIT mas EXPR_ARIT
            |EXPR_ARIT menos EXPR_ARIT
            |EXPR_ARIT por EXPR_ARIT
            |EXPR_ARIT div EXPR_ARIT
            |EXPR_ARIT potencia EXPR_ARIT
            |numEntero
            |numDecimal
            |menos EXPR_ARIT
            |identificador
            |_verdadero
            |_falso
            |caracter
            |cadena
            |LLAMADAS_FUNC
            |parent_a EXPR_LOGICA parent_c;

TIPO::=  _decimal
        |_booleano
        |_texto
        |_entero;