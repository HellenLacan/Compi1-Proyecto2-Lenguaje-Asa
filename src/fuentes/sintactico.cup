package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible
    
    public static Nodo padre;
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.err.println("ERROR R: ");
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("ERROR N_R: ");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.
:}

terminal cadena, numEntero, numDecimal, identificador, caracter;
terminal _importar, _definir, _decimal, _booleano, _texto, _vacio, _entero, _verdadero, _falso, _principal, _retorno;
terminal _esVerdadero, _esFalso;
terminal punto, ptoYcoma, coma, mas, menos, por, div, modular, potencia, asignacion, igual, diferente, menor, menorQ;
terminal mayor, mayorQ, diferencia, and, or, not, parent_a, parent_c, llave_a, llave_c;

nonterminal INICIAR, SENTENCIAS, SENTENCIAS1, TIPO;
nonterminal DECLARACION_VARIABLES, LISTA_VARIABLES, ASIGN_VARIABLES, LLAMADAS_FUNC, LISTA_LLAMADA_FUNC;
nonterminal OP_REL, EXPR_REL, EXPR_LOGICA, TIPO_EXPR, ASIGNACIONES, FUNCIONES, PRINCIPAL;
nonterminal METODOS, LISTA_PARAMETROS, RETORNO, SENT_ES_VERDADERO, ES_VERD_CON_FALSO;
nonterminal EXPR_ARIT, T, F, D;

precedence left or;
precedence left and;
precedence right not;
precedence left menor, menorQ, mayorQ, menorQ, igual, diferente;
precedence left mas, menos;
precedence left por, div; 
precedence right potencia; 
start with INICIAR;

INICIAR::= SENTENCIAS;

SENTENCIAS::= SENTENCIAS1 
              |;

SENTENCIAS1::=  SENTENCIAS1 _importar
               |SENTENCIAS1 DECLARACION_VARIABLES
               |SENTENCIAS1 ASIGNACIONES
               |SENTENCIAS1 FUNCIONES
               |SENTENCIAS1 METODOS
               |SENTENCIAS1 PRINCIPAL
               |SENTENCIAS1 LLAMADAS_FUNC ptoYcoma
               |SENTENCIAS1 RETORNO
               |SENTENCIAS1 SENT_ES_VERDADERO
               |SENT_ES_VERDADERO
               |RETORNO
               |LLAMADAS_FUNC ptoYcoma
               |PRINCIPAL
               |METODOS
               |FUNCIONES
               |_importar
               |ASIGNACIONES
               |DECLARACION_VARIABLES;

DECLARACION_VARIABLES::=TIPO LISTA_VARIABLES ASIGN_VARIABLES ptoYcoma;

LISTA_VARIABLES::= LISTA_VARIABLES coma identificador 
                  |identificador;

LLAMADAS_FUNC::= identificador parent_a LISTA_LLAMADA_FUNC parent_c;

LISTA_LLAMADA_FUNC::= LISTA_LLAMADA_FUNC coma EXPR_ARIT
                     |EXPR_ARIT
                     |;

ASIGN_VARIABLES::= asignacion EXPR_ARIT
                  |;

ASIGNACIONES::= identificador asignacion EXPR_ARIT ptoYcoma;

FUNCIONES::= TIPO identificador parent_a LISTA_PARAMETROS parent_c llave_a llave_c;

METODOS::= _vacio identificador parent_a LISTA_PARAMETROS parent_c llave_a llave_c;

PRINCIPAL::=_vacio _principal parent_a parent_c llave_a llave_c;

RETORNO::= _retorno ptoYcoma
          |_retorno EXPR_ARIT ptoYcoma;

SENT_ES_VERDADERO::= _esVerdadero parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c ES_VERD_CON_FALSO;

ES_VERD_CON_FALSO::= _esFalso llave_a SENTENCIAS llave_c
                    |;

LISTA_PARAMETROS::= LISTA_PARAMETROS coma TIPO identificador
                   |TIPO identificador
                   |;

EXPR_LOGICA::= EXPR_LOGICA or EXPR_LOGICA
              |EXPR_LOGICA and EXPR_LOGICA
              |not EXPR_LOGICA
              |EXPR_REL;

EXPR_REL::= EXPR_ARIT OP_REL EXPR_ARIT
          |EXPR_ARIT;

OP_REL::= mayor
           |menor
           |menorQ
           |mayorQ
           |igual
           |diferente;

EXPR_ARIT::= EXPR_ARIT mas EXPR_ARIT
            |EXPR_ARIT menos EXPR_ARIT
            |EXPR_ARIT por EXPR_ARIT
            |EXPR_ARIT div EXPR_ARIT
            |EXPR_ARIT potencia EXPR_ARIT
            |numEntero
            |numDecimal
            |menos EXPR_ARIT
            |identificador
            |_verdadero
            |_falso
            |caracter
            |cadena
            |LLAMADAS_FUNC
            |parent_a EXPR_LOGICA parent_c;

TIPO::=  _decimal
        |_booleano
        |_texto
        |_entero
        |identificador;