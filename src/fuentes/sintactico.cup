package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible
    
    public static Nodo padre = new Nodo("PADRE");
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico Recuperado -> lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error Sintactico Panico -> Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }

:}

action code
{://Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.
:}

terminal String cadena, numEntero, numDecimal, identificador, caracter;
terminal String _importar, _definir, _decimal, _booleano, _texto, _vacio, _entero, _verdadero, _falso, _principal, _retorno;
terminal String _esVerdadero, _esFalso, _cambiarA, _valor, _noCumple, _para, _hastaQue, _mientrasQue, _romper, _continuar;
terminal String _mostrar, _dibujarAst, _dibujarExp, _dibujarTs, _asa, decremento;
terminal String punto, ptoYcoma, coma, mas, menos, por, div, modular, potencia, asignacion, igual, diferente, menor, menorQ;
terminal String mayor, mayorQ, diferencia, and, or, not, parent_a, parent_c, llave_a, llave_c, dosPtos;

nonterminal Nodo INICIAR, SO, CUERPO_PRINCIPAL, SENTENCIAS, LISTA_SENTENCIAS, TIPO, IMPORTAR, DEFINIR;
nonterminal Nodo DECLARACION_VARIABLES, LISTA_VARIABLES, ASIGN_VARIABLES, LLAMADAS_FUNC, LISTA_LLAMADA_FUNC;
nonterminal Nodo OP_REL, EXPR_REL, EXPR_LOGICA, TIPO_EXPR, ASIGNACIONES, FUNCIONES, METODO_PRINCIPAL;
nonterminal Nodo METODOS, LISTA_PARAMETROS, RETORNO, SENT_ES_VERDADERO, ES_VERD_CON_FALSO, CAMBIAR_A, CASOS;
nonterminal Nodo EXPR_ARIT, LISTA_CASOS, VALORES_CASE, NO_CUMPLE, VALORES_PARA, PARA, ITERADOR, HASTA_QUE, MIENTRAS_QUE;
nonterminal Nodo ROMPER, CONTINUAR, MOSTRAR, DIBUJAR_AST, DIBUJAR_EXP, DIBUJAR_TS;

precedence left mas, menos;
precedence left por, div, modular; 
precedence right potencia; 
precedence nonassoc menor, menorQ, mayorQ, menorQ, igual, diferente;
precedence left or;
precedence left and;
precedence right not;

start with INICIAR;

INICIAR::= CUERPO_PRINCIPAL:cp 
                            {: Nodo n = new Nodo("INICIAR");
                               n.addHijo((Nodo)cp);
                               padre.addHijo(n);
                               padre.setIdNodo(1);
                               padre.setNoHijos(padre.getNoHijos()+1);
                            :}
;

CUERPO_PRINCIPAL::= CUERPO_PRINCIPAL:cp IMPORTAR:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp DEFINIR:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp DECLARACION_VARIABLES:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp ASIGNACIONES:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp FUNCIONES:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp METODOS:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp METODO_PRINCIPAL:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |IMPORTAR:imp
                            {: 
                               RESULT = imp;
                            :}
                   |DEFINIR:def
                            {: 
                               RESULT = def;
                            :}
                   |DECLARACION_VARIABLES:var
                            {: 
                               RESULT = var;
                            :}
                   |ASIGNACIONES:asign
                            {: 
                               RESULT = asign;
                            :}
                   |FUNCIONES:fun
                            {: 
                               RESULT = fun;
                            :}
                   |METODOS:met
                            {: 
                               RESULT = met;
                            :}
                   |METODO_PRINCIPAL:prin
                            {: 
                               RESULT = prin;
                            :}
                   ;

SENTENCIAS::= LISTA_SENTENCIAS:n1
                            {:
                               Nodo n = new Nodo("SENTENCIAS");
                               n.addHijo(n1);
                               RESULT = n;
                            :}
             |
                            {:
                               System.out.println("MMM esta intentnado pasar por aqui");
                               RESULT = null;
                            :}
;

LISTA_SENTENCIAS::=  LISTA_SENTENCIAS:n1 ASIGNACIONES:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DECLARACION_VARIABLES:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 LLAMADAS_FUNC:n2 ptoYcoma
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 RETORNO:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 SENT_ES_VERDADERO:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 CAMBIAR_A:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 PARA:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 HASTA_QUE:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 MIENTRAS_QUE:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 ROMPER:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 CONTINUAR:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 MOSTRAR:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DIBUJAR_AST:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DIBUJAR_EXP:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DIBUJAR_TS:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |ASIGNACIONES:n1
                            {:
                                RESULT= n1;
                            :}
                    |DECLARACION_VARIABLES:n1
                            {:
                                RESULT= n1;
                            :}
                    |LLAMADAS_FUNC:n1 ptoYcoma
                            {:
                                RESULT= n1;
                            :}
                    |RETORNO:n1
                            {:
                                RESULT= n1;
                            :}
                    |SENT_ES_VERDADERO:n1
                            {:
                                RESULT= n1;
                            :}
                    |CAMBIAR_A:n1
                            {:
                                RESULT= n1;
                            :}
                    |PARA:n1
                            {:
                                RESULT= n1;
                            :}
                    |HASTA_QUE:n1
                            {:
                                RESULT= n1;
                            :}
                    |MIENTRAS_QUE:n1
                            {:
                                RESULT= n1;
                            :}
                    |ROMPER:n1
                            {:
                                RESULT= n1;
                            :}
                    |CONTINUAR:n1
                            {:
                                RESULT= n1;
                            :}
                    |MOSTRAR:n1
                            {:
                                RESULT= n1;
                            :}
                    |DIBUJAR_AST:n1
                            {:
                                RESULT= n1;
                            :}
                    |DIBUJAR_EXP:n1
                            {:
                                RESULT= n1;
                            :}
                    |DIBUJAR_TS:n1
                            {:
                                RESULT= n1;
                            :}
;

IMPORTAR::=_importar:imp identificador:id punto _asa ptoYcoma
                           {:
                             Nodo n = new Nodo("IMPORTAR");
                             Nodo n1 = new Nodo(imp, impleft, impright);
                             Nodo n2 = new Nodo(id, idleft, idright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             n.setNoHijos(n.getNoHijos()+2);
                             RESULT = n;
                           :}
;

DEFINIR::= _definir:def cadena:cad ptoYcoma
                           {:
                             Nodo n = new Nodo("DEFINIR");
                             String cadena = cad.replace("\"", "");
                             Nodo n1 = new Nodo(def, defleft, defright);
                             Nodo n2 = new Nodo(cadena, cadleft, cadright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             n.setNoHijos(n.getNoHijos()+2);
                             RESULT = n;
                           :}
;

DECLARACION_VARIABLES::=TIPO:n1 LISTA_VARIABLES:n2 ASIGN_VARIABLES:n3 ptoYcoma
                           {:
                             Nodo n = new Nodo("DECLARACION_VARIABLES");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             if(n3 != null){
                                n.addHijo(n3);
                             }
                             RESULT = n;
                           :}
;

LISTA_VARIABLES::= LISTA_VARIABLES:n1 coma identificador:id 
                           {:
                             Nodo n = new Nodo("LISTA_VARIABLES");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(id, idleft, idright);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
                  |identificador:id
                           {:
                             Nodo n = new Nodo("LISTA_VARIABLES");
                             Nodo n1 = new Nodo(id, idleft, idright);
                             n.addHijo(n1);
                             RESULT = n;
                           :}
;

LLAMADAS_FUNC::= identificador:id parent_a LISTA_LLAMADA_FUNC:n2 parent_c
                            {:
                              Nodo n = new Nodo("LLAMADA_FUNCION");
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              if(n2 != null){
                                n.addHijo(n2);
                              }
                              RESULT = n;
                            :}
;

LISTA_LLAMADA_FUNC::= LISTA_LLAMADA_FUNC:n1 coma EXPR_ARIT:n2
                            {:
                              Nodo n = new Nodo("LISTA_PARAM_LLAMADA_FUN");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
                     |EXPR_ARIT:exp
                            {:
                              RESULT = exp;
                            :}
                     |
                            {:
                              RESULT = null;
                            :}
;

ASIGN_VARIABLES::= asignacion EXPR_ARIT:exp
                           {:
                             Nodo n = new Nodo("EXP");
                             n.addHijo(exp);
                             RESULT = n;
                           :}
                  |
                           {:
                             RESULT = null;
                           :}
;

ASIGNACIONES::= LISTA_VARIABLES:n1 asignacion EXPR_ARIT:n2 ptoYcoma
                           {:
                             Nodo n = new Nodo("ASIGNACIONES");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
;

FUNCIONES::= TIPO:n1 identificador:id parent_a LISTA_PARAMETROS:n3 parent_c llave_a SENTENCIAS:n4 llave_c
                            {: 
                              Nodo n = new Nodo("FUNCION");
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              if(n4 != null){
                                 n.addHijo(n4);
                              }
                              RESULT = n;
                            :}
;

METODOS::= _vacio:tipo identificador:id parent_a LISTA_PARAMETROS:n3 parent_c llave_a SENTENCIAS:n4 llave_c
                            {: 
                              Nodo n = new Nodo("METODO");
                              Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              if(n4 != null){
                                 n.addHijo(n4);
                              }
                              RESULT = n;
                            :}
;

METODO_PRINCIPAL::=_vacio:tipo _principal:id parent_a parent_c llave_a SENTENCIAS:n3 llave_c
                            {: 
                              Nodo n = new Nodo("METODO_PRINCIPAL");
                              Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              if(n3 != null){
                                n.addHijo(n3);
                              }
                              RESULT = n;
                            :}
;

RETORNO::= _retorno ptoYcoma
          |_retorno EXPR_ARIT ptoYcoma;

SENT_ES_VERDADERO::= _esVerdadero parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c ES_VERD_CON_FALSO;

ES_VERD_CON_FALSO::= _esFalso llave_a SENTENCIAS llave_c
                    |;

CAMBIAR_A::= _cambiarA parent_a EXPR_ARIT parent_c llave_a CASOS NO_CUMPLE llave_c;

CASOS::= CASOS LISTA_CASOS
        |LISTA_CASOS;

LISTA_CASOS::= _valor VALORES_CASE dosPtos SENTENCIAS;

NO_CUMPLE::=_noCumple dosPtos SENTENCIAS
            |;

VALORES_CASE::= identificador
                |numEntero
                |numDecimal;

PARA::=_para parent_a VALORES_PARA identificador asignacion EXPR_ARIT ptoYcoma EXPR_LOGICA ptoYcoma ITERADOR parent_c llave_a LISTA_SENTENCIAS llave_c; 

VALORES_PARA::= _decimal
               |_entero;

ITERADOR::= mas mas
           |decremento;

HASTA_QUE::= _hastaQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c;

MIENTRAS_QUE::= _mientrasQue parent_a EXPR_LOGICA parent_c llave_a SENTENCIAS llave_c;

LISTA_PARAMETROS::= LISTA_PARAMETROS:n1 coma TIPO:n2 identificador:id
                            {:
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              Nodo n3 = new Nodo(id, idleft, idright);
                              n.addHijo(n3);
                              RESULT = n;
                            :}  
                   |TIPO:n1 identificador:id
                            {:
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
                   |
                            {:
                              RESULT = null;
                            :}
;

ROMPER::= _romper ptoYcoma;

CONTINUAR::=_continuar ptoYcoma;

MOSTRAR::= _mostrar parent_a EXPR_ARIT parent_c ptoYcoma
          |_mostrar parent_a parent_c ptoYcoma;

DIBUJAR_AST::= _dibujarAst parent_a identificador parent_c ptoYcoma;

DIBUJAR_EXP::= _dibujarExp parent_a EXPR_LOGICA parent_c ptoYcoma;

DIBUJAR_TS::= _dibujarTs parent_a parent_c ptoYcoma;

EXPR_LOGICA::= EXPR_LOGICA:n1 or:signo EXPR_LOGICA:n3
                           {:
                             Nodo n = new Nodo("EXPR_LOGICA");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
              |EXPR_LOGICA:n1 and:signo EXPR_LOGICA:n3
                           {:
                             Nodo n = new Nodo("EXPR_LOGICA");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
              |not:exp EXPR_LOGICA:n2
                           {:
                             Nodo n = new Nodo("NEG");
                             Nodo n1 = new Nodo(exp, expleft, expright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
              |EXPR_REL:exp
                           {:
                             RESULT = exp;
                           :}
;

EXPR_REL::= EXPR_ARIT:n1 OP_REL:n2 EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_REL");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
           |EXPR_ARIT:n
                           {:
                             RESULT = n;
                           :}
;

OP_REL::=   mayor:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |menor:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |menorQ:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |mayorQ:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |igual:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |diferente:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :};

EXPR_ARIT::= EXPR_ARIT:n1 mas:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 menos:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 por:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 div:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 modular:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 potencia:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |numEntero:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
            |numDecimal:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
            |menos:exp EXPR_ARIT:n2
                           {:
                             Nodo n = new Nodo("NUM_NEG");
                             Nodo n1 = new Nodo(exp, expleft, expright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
            |identificador:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
            |_verdadero:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
            |_falso:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
            |caracter:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
            |cadena:exp
                           {:
                             String cadena = exp.replace("\"", "");
                             Nodo n = new Nodo(cadena, expleft, expright);
                             RESULT = n;
                           :}
            |LLAMADAS_FUNC:exp
                           {:
                             RESULT = exp;
                           :}
            |parent_a EXPR_LOGICA:exp parent_c
                           {:
                             RESULT = exp;
                           :}
;


TIPO::=  _decimal:tipo
                           {:
                             Nodo n = new Nodo("TIPO");
                             Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                             n.addHijo(n1);
                             RESULT = n;
                           :}
        |_booleano:tipo
                           {:
                             Nodo n = new Nodo("TIPO");
                             Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                             n.addHijo(n1);
                             RESULT = n;
                           :}
        |_texto:tipo
                           {:
                             Nodo n = new Nodo("TIPO");
                             Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                             n.addHijo(n1);
                             RESULT = n;
                           :}
        |_entero:tipo
                           {:
                             Nodo n = new Nodo("TIPO");
                             Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                             n.addHijo(n1);
                             RESULT = n;
                           :}
;
