package fuentes;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible
    
    public static Nodo padre = new Nodo("PADRE");
    public int cont = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico Recuperado -> lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error Sintactico Panico -> Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }

:}

action code
{://Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado; //struct struct 
    Stack<String> tmp = new Stack<>(); // esto queda a  nivel implementacion unicamente ya que teoricamente es posible sin esto.
:}

terminal String cadena, numEntero, numDecimal, identificador, caracter;
terminal String _importar, _definir, _decimal, _booleano, _texto, _vacio, _entero, _verdadero, _falso, _principal, _retorno;
terminal String _esVerdadero, _esFalso, _cambiarA, _valor, _noCumple, _para, _hastaQue, _mientrasQue, _romper, _continuar;
terminal String _mostrar, _dibujarAst, _dibujarExp, _dibujarTs, _asa, decremento, incremento;
terminal String punto, ptoYcoma, coma, mas, menos, por, div, modular, potencia, asignacion, igual, diferente, menor, menorQ;
terminal String mayor, mayorQ, diferencia, and, or, not, parent_a, parent_c, llave_a, llave_c, dosPtos;

nonterminal Nodo INICIAR, SO, CUERPO_PRINCIPAL, SENTENCIAS, LISTA_SENTENCIAS, TIPO, IMPORTAR, DEFINIR;
nonterminal Nodo DECLARACION_VARIABLES, LISTA_VARIABLES, ASIGN_VARIABLES, LLAMADAS_FUNC, LISTA_LLAMADA_FUNC, LISTA_ID_LLAMADA_FUN;
nonterminal Nodo OP_REL, EXPR_REL, EXPR_LOGICA, TIPO_EXPR, ASIGNACIONES, FUNCIONES, METODO_PRINCIPAL,LLAMADITA_FUN, LLAMADA_VARIABLES;
nonterminal Nodo METODOS, LISTA_PARAMETROS, RETORNO, SENT_ES_VERDADERO, ES_VERD_CON_FALSO, CAMBIAR_A, CASOS;
nonterminal Nodo EXPR_ARIT, LISTA_CASOS, VALORES_CASE, NO_CUMPLE, VALORES_PARA, PARA, ITERADOR, HASTA_QUE, MIENTRAS_QUE;
nonterminal Nodo ROMPER, CONTINUAR, MOSTRAR, DIBUJAR_AST, DIBUJAR_EXP, DIBUJAR_TS;

precedence left mas, menos;
precedence left por, div, modular; 
precedence right potencia; 
precedence nonassoc menor, menorQ, mayorQ, menorQ, igual, diferente;
precedence left or;
precedence left and;
precedence right not;

start with INICIAR;

INICIAR::= CUERPO_PRINCIPAL:cp 
                            {: Nodo n = new Nodo("INICIAR");
                               n.addHijo(cp);
                               padre  = n;
                            :}
;

CUERPO_PRINCIPAL::= CUERPO_PRINCIPAL:cp IMPORTAR:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp DEFINIR:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp DECLARACION_VARIABLES:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp ASIGNACIONES:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp FUNCIONES:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp METODOS:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |CUERPO_PRINCIPAL:cp METODO_PRINCIPAL:n1
                            {: 
                             Nodo n = new Nodo("CUERPO_PRINCIPAL");
                             n.addHijo(cp);
                             n.addHijo(n1);
                             RESULT = n;
                            :}
                   |IMPORTAR:n1
                            {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   |DEFINIR:n1
                             {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   |DECLARACION_VARIABLES:n1
                            {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   |ASIGNACIONES:n1
                            {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   |FUNCIONES:n1
                            {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   |METODOS:n1
                            {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   |METODO_PRINCIPAL:n1
                            {:
                                Nodo n = new Nodo("CUERPO_PRINCIPAL");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                   ;

SENTENCIAS::= LISTA_SENTENCIAS:n
                            {:
                               RESULT = n;
                            :}
             |
                            {:
                               Nodo n = new Nodo("LISTA_SENTENCIAS");
                               RESULT = n;
                            :}
;

LISTA_SENTENCIAS::=  LISTA_SENTENCIAS:n1 ASIGNACIONES:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DECLARACION_VARIABLES:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 LLAMADAS_FUNC:n2 ptoYcoma
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 RETORNO:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 SENT_ES_VERDADERO:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS", n2.getFila(), n2.getColumna());
                                n.setTipo("NoTerm");
                                n.addHijo(n1);
                                n1.setTipo("NoTerm");
                                n2.setTipo("NoTerm");
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 CAMBIAR_A:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 PARA:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 HASTA_QUE:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 MIENTRAS_QUE:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 ROMPER:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 CONTINUAR:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 MOSTRAR:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DIBUJAR_AST:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DIBUJAR_EXP:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |LISTA_SENTENCIAS:n1 DIBUJAR_TS:n2
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
                    |ASIGNACIONES:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |DECLARACION_VARIABLES:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;                            
                            :}
                    |LLAMADAS_FUNC:n1 ptoYcoma
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;                            
                            :}
                    |RETORNO:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |SENT_ES_VERDADERO:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS", n1.getFila(), n1.getColumna());
                                n.setTipo("NoTerm");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |CAMBIAR_A:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |PARA:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |HASTA_QUE:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |MIENTRAS_QUE:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |ROMPER:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |CONTINUAR:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |MOSTRAR:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |DIBUJAR_AST:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |DIBUJAR_EXP:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
                    |DIBUJAR_TS:n1
                            {:
                                Nodo n = new Nodo("LISTA_SENTENCIAS");
                                n.addHijo(n1);
                                RESULT= n;
                            :}
;

IMPORTAR::=_importar:imp identificador:id punto _asa ptoYcoma
                           {:
                             Nodo n = new Nodo("IMPORTAR");
                             Nodo n1 = new Nodo(imp, impleft, impright);
                             Nodo n2 = new Nodo(id, idleft, idright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
;

DEFINIR::= _definir:def cadena:cad ptoYcoma
                           {:
                             Nodo n = new Nodo("DEFINIR");
                             String cadena = cad.replace("\"", "");
                             Nodo n1 = new Nodo(def, defleft, defright);
                             Nodo n2 = new Nodo(cadena, cadleft, cadright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
;

DECLARACION_VARIABLES::=TIPO:n1 LISTA_VARIABLES:n2 ASIGN_VARIABLES:asign ptoYcoma
                           {:
                             Nodo n = new Nodo("DECLARACION_VARIABLES");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             Nodo n3 = new Nodo("EXPR");
                             n3.addHijo(asign);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
;

LISTA_VARIABLES::= LISTA_VARIABLES:n1 coma identificador:id 
                           {:
                             Nodo n = new Nodo("LISTA_VARIABLES");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(id, idleft, idright);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
                  |identificador:id
                           {:
                             Nodo n = new Nodo("LISTA_VARIABLES");
                             Nodo n1 = new Nodo(id, idleft, idright);
                             n.addHijo(n1);
                             RESULT = n;
                           :}
;

LLAMADA_VARIABLES::= LISTA_ID_LLAMADA_FUN:n
                            {:
                              RESULT = n;
                            :}
;

LLAMADAS_FUNC::= identificador:id LISTA_ID_LLAMADA_FUN:n2 parent_a LISTA_LLAMADA_FUNC:n3 parent_c
                            {:
                              Nodo n = new Nodo("LLAMADA_FUNCION");
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n1.setTipoVar("ID_LLAMADA_FUN");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              RESULT = n;
                            :}
;

LISTA_ID_LLAMADA_FUN::= LLAMADITA_FUN:n
                            {:
                              RESULT = n;
                            :}
                        |
                            {:
                              RESULT = null;
                            :}
;

LLAMADITA_FUN::= LLAMADITA_FUN:n1 punto identificador:id
                            {:
                              Nodo n = new Nodo("LISTA_ID");
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
                |punto identificador:id
                            {:
                              Nodo n = new Nodo("LISTA_ID");
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              RESULT = n;
                            :}
;

LISTA_LLAMADA_FUNC::= LISTA_LLAMADA_FUNC:n1 coma EXPR_LOGICA:n2
                            {:
                              Nodo n = new Nodo("LISTA_PARAM");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
                     |EXPR_LOGICA:exp
                            {:
                              Nodo n = new Nodo("LISTA_PARAM");
                              n.addHijo(exp);
                              RESULT = n;
                            :}
                     |
                            {:
                              Nodo n = new Nodo("LISTA_PARAM");
                              RESULT = n;
                            :}
;

ASIGN_VARIABLES::= asignacion EXPR_LOGICA:n
                           {:
                             RESULT = n;
                           :}
                  |
                           {:
                             RESULT = null;
                           :}
;

ASIGNACIONES::= LISTA_VARIABLES:n1 asignacion EXPR_ARIT:n2 ptoYcoma
                           {:
                             Nodo n = new Nodo("ASIGNACIONES");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
;

FUNCIONES::= TIPO:n1 identificador:id parent_a LISTA_PARAMETROS:n3 parent_c llave_a SENTENCIAS:n4 llave_c
                            {: 
                              Nodo n = new Nodo("FUNCION");
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              n.addHijo(n4);
                              RESULT = n;
                            :}
;

METODOS::= _vacio:tipo identificador:id parent_a LISTA_PARAMETROS:n3 parent_c llave_a SENTENCIAS:n4 llave_c
                            {: 
                              Nodo n = new Nodo("METODO");
                              Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              n.addHijo(n4);
                              RESULT = n;
                            :}
;

METODO_PRINCIPAL::=_vacio:tipo _principal:id parent_a parent_c llave_a SENTENCIAS:n3 llave_c
                            {: 
                              Nodo n = new Nodo("METODO_PRINCIPAL");
                              Nodo n1 = new Nodo(tipo, tipoleft, tiporight);
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idright, idleft);
                              n.addHijo(n2);
                              n.addHijo(n3);
                              RESULT = n;
                            :}
;

RETORNO::= _retorno:id ptoYcoma
                            {:
                                Nodo n = new Nodo("RETORNO", idright, idleft);
                                n.setTipo("NoTerminal");
                                RESULT = n;
                            :}
          |_retorno:id EXPR_ARIT:n1 ptoYcoma
                            {:
                                Nodo n = new Nodo("RETORNO", idright, idleft);
                                n.setTipo("NoTerminal");
                                n.addHijo(n1);
                                RESULT = n;
                            :}
;

SENT_ES_VERDADERO::= _esVerdadero:id parent_a:a EXPR_LOGICA:n2 parent_c llave_a SENTENCIAS:n3 llave_c ES_VERD_CON_FALSO:n4
                            {:
                                Nodo n = new Nodo("ES_VERDADERO", idright, aleft);
                                n.setTipo("NoTerm");
                                n.addHijo(n2);
                                n.addHijo(n3);
                                if(n4 != null){
                                    n.addHijo(n4);
                                }
                                RESULT = n;
                            :}
;

ES_VERD_CON_FALSO::= _esFalso llave_a SENTENCIAS:n1 llave_c
                            {:
                                Nodo n = new Nodo("ES_FALSO");
                                n.addHijo(n1);          
                                RESULT = n;
                            :}
                    |
                            {:
                               RESULT = null;
                            :}
;

CAMBIAR_A::= _cambiarA parent_a EXPR_ARIT:n1 parent_c llave_a CASOS:n2 NO_CUMPLE:n3 llave_c
                            {:
                                Nodo n = new Nodo("CAMBIAR_A");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                if(n3 != null){
                                    n.addHijo(n3);
                                }
                                RESULT = n;
                            :}
;

CASOS::= CASOS:n1 LISTA_CASOS:n2
                            {:
                             Nodo n = new Nodo("LISTA_CASOS");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                            :}

        |LISTA_CASOS:n1
                            {:
                                Nodo n = new Nodo("LISTA_CASOS");
                                n.addHijo(n1);
                                RESULT = n;
                            :}
;

LISTA_CASOS::= _valor VALORES_CASE:n1 dosPtos SENTENCIAS:n2
                            {:
                                Nodo n = new Nodo("LISTA_CASOS");
                                n.addHijo(n1);
                                n.addHijo(n2);
                                RESULT = n;
                            :}
;

NO_CUMPLE::=_noCumple dosPtos SENTENCIAS:n1
                            {:
                                Nodo n = new Nodo("NO_CUMPLE"); 
                                n.addHijo(n1);
                                RESULT = n;
                            :}
            |
                            {:
                                RESULT = null;
                            :};

VALORES_CASE::= identificador:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
                |numEntero:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
                |numDecimal:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
;

PARA::=_para parent_a VALORES_PARA:tipo identificador:id asignacion EXPR_ARIT:valIni ptoYcoma EXPR_LOGICA:exp ptoYcoma 
       ITERADOR:it parent_c llave_a LISTA_SENTENCIAS:sent llave_c
                            {:
                              Nodo n = new Nodo("PARA");
                              Nodo nodoCondIni = new Nodo("COND_INI");
                              nodoCondIni.addHijo(tipo);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              nodoCondIni.addHijo(n2);
                              nodoCondIni.addHijo(valIni);
                              Nodo nodoCondFin = new Nodo("COND_FIN");
                              nodoCondFin.addHijo(exp);
                              Nodo nodoIncDec = new Nodo("PASO");
                              Nodo nodoIncId = new Nodo(id, idleft, idright);
                              nodoIncDec.addHijo(nodoIncId);
                              nodoIncDec.addHijo(it);
                              n.addHijo(nodoCondIni);
                              n.addHijo(nodoCondFin);
                              n.addHijo(nodoIncDec);
                              n.addHijo(sent);
                              RESULT = n;
                            :}
; 

VALORES_PARA::= _decimal:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
               |_entero:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
;

ITERADOR::= incremento:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
           |decremento:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright);
                             RESULT = n;
                           :}
;

HASTA_QUE::= _hastaQue parent_a EXPR_LOGICA:n1 parent_c llave_a SENTENCIAS:n2 llave_c
                            {:
                              Nodo n = new Nodo("HASTA_QUE");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
;

MIENTRAS_QUE::= _mientrasQue parent_a EXPR_LOGICA:n1 parent_c llave_a SENTENCIAS:n2 llave_c
                            {:
                              Nodo n = new Nodo("MIENTRAS_QUE");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
;

LISTA_PARAMETROS::= LISTA_PARAMETROS:n1 coma TIPO:n2 identificador:id
                            {:
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              n.addHijo(n1);
                              n.addHijo(n2);
                              Nodo n3 = new Nodo(id, idleft, idright);
                              n.addHijo(n3);
                              RESULT = n;
                            :}  
                   |TIPO:n1 identificador:id
                            {:
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              n.addHijo(n1);
                              Nodo n2 = new Nodo(id, idleft, idright);
                              n.addHijo(n2);
                              RESULT = n;
                            :}
                   |
                            {:
                              Nodo n = new Nodo("LISTA_PARAMETROS");
                              RESULT = n;
                            :}
;

ROMPER::= _romper:id ptoYcoma
                            {:
                              Nodo n = new Nodo("ROMPER", idleft, idright);
                              n.setTipo("NoTerm");
                              RESULT = n;
                            :}
;

CONTINUAR::=_continuar:id ptoYcoma
                            {:
                              Nodo n = new Nodo("CONTINUAR", idleft, idright);
                              n.setTipo("NoTerm");
                              RESULT = n;
                            :}
;

MOSTRAR::= _mostrar:id parent_a EXPR_LOGICA:exp parent_c ptoYcoma
                            {:
                              Nodo n = new Nodo("MOSTRAR", idleft, idright);
                              n.setTipo("NoTerm");
                              n.addHijo(exp);
                              RESULT = n;
                            :}
          |_mostrar:id parent_a parent_c ptoYcoma
                            {:
                              Nodo n = new Nodo("MOSTRAR", idleft, idright);
                              n.setTipo("NoTerm");
                              RESULT = n;
                            :}
;

DIBUJAR_AST::= _dibujarAst:dib parent_a identificador:id parent_c ptoYcoma
                            {:
                              Nodo n = new Nodo("DIBUJAR_AST", dibleft, dibright);
                              Nodo n1 = new Nodo(id, idleft, idright);
                              n.addHijo(n1);
                              RESULT = n;
                            :}
;

DIBUJAR_EXP::= _dibujarExp:dib parent_a EXPR_LOGICA:exp parent_c ptoYcoma
                            {:
                              Nodo n = new Nodo("DIBUJAR_EXP", dibleft, dibright);
                              n.addHijo(exp);
                              RESULT = n;
                            :}
;

DIBUJAR_TS::= _dibujarTs:dib parent_a parent_c ptoYcoma
                            {:
                              Nodo n = new Nodo("DIBUJAR_TS", dibleft, dibright);
                              RESULT = n;
                            :}
;

EXPR_LOGICA::= EXPR_LOGICA:n1 or:signo EXPR_LOGICA:n3
                           {:
                             Nodo n = new Nodo("EXPR_LOGICA");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
              |EXPR_LOGICA:n1 and:signo EXPR_LOGICA:n3
                           {:
                             Nodo n = new Nodo("EXPR_LOGICA");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
              |not:exp EXPR_LOGICA:n2
                           {:
                             Nodo n = new Nodo("NEG");
                             Nodo n1 = new Nodo(exp, expleft, expright);
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
              |EXPR_REL:exp
                           {:
                             RESULT = exp;
                           :}
;

EXPR_REL::= EXPR_ARIT:n1 OP_REL:n2 EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_REL");
                             n.addHijo(n1);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
           |EXPR_ARIT:n
                           {:
                             RESULT = n;
                           :}
;

OP_REL::=   mayor:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |menor:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |menorQ:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |mayorQ:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |igual:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :}
           |diferente:op
                           {:
                             Nodo n = new Nodo(op, opleft, opright);
                             RESULT = n;
                           :};

EXPR_ARIT::= EXPR_ARIT:n1  mas:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 menos:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 por:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 div:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 modular:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |EXPR_ARIT:n1 potencia:signo EXPR_ARIT:n3
                           {:
                             Nodo n = new Nodo("EXPR_ARIT");
                             n.addHijo(n1);
                             Nodo n2 = new Nodo(signo, signoleft, signoright);
                             n.addHijo(n2);
                             n.addHijo(n3);
                             RESULT = n;
                           :}
            |numEntero:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright, "entero");
                             RESULT = n;
                           :}
            |numDecimal:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright, "decimal");
                             RESULT = n;
                           :}
            |menos:exp EXPR_ARIT:n2
                           {:
                             Nodo n = new Nodo("NUM_NEG");
                             Nodo n1 = new Nodo(exp, expleft, expright, n2.getTipoVar());
                             n.addHijo(n1);
                             n.addHijo(n2);
                             RESULT = n;
                           :}
            |identificador:exp LLAMADA_VARIABLES:n2
                           {:
                             Nodo n = new Nodo(exp, expleft, expright, "identificador");
                             n.addHijo(n2);
                             RESULT = n;
                           :}
            |_verdadero:exp 
                           {:
                             Nodo n = new Nodo(exp, expleft, expright, "booleano");
                             RESULT = n;
                           :}
            |_falso:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright, "booleano");
                             RESULT = n;
                           :}
            |caracter:exp
                           {:
                             Nodo n = new Nodo(exp, expleft, expright, "cadena");
                             RESULT = n;
                           :}
            |cadena:exp
                           {:
                             String cadena = exp.replace("\"", "");
                             Nodo n = new Nodo(cadena, expleft, expright, "texto");
                             RESULT = n;
                           :}
            |LLAMADAS_FUNC:exp
                           {:
                             RESULT = exp;
                           :}
            |parent_a EXPR_LOGICA:exp parent_c
                           {:
                             RESULT = exp;
                           :}
;


TIPO::= _entero:tipo
                           {:
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"entero");
                             RESULT = n;
                           :}

        |_decimal:tipo
                           {:
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"decimal");
                             RESULT = n;
                           :}
        |_booleano:tipo
                           {:
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"booleano");
                             RESULT = n;
                           :}
        |_texto:tipo
                           {:
                             Nodo n = new Nodo(tipo, tipoleft, tiporight,"texto");
                             RESULT = n;
                           :}
;