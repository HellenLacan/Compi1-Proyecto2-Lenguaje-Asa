/* The following code was generated by JFlex 1.7.0 */

package fuentes;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/fuentes/lexico.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ComentSimple = 2;
  public static final int ComentMultiLinea = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\62\1\6\1\64\1\63\1\63\16\3\4\0\1\62\1\42"+
    "\1\5\1\0\1\2\1\55\1\41\1\7\1\37\1\40\1\53\1\51"+
    "\1\36\1\52\1\4\1\54\12\1\1\61\1\56\1\47\1\46\1\45"+
    "\2\0\1\16\1\25\1\23\1\17\1\20\1\21\1\2\1\33\1\10"+
    "\1\35\1\2\1\24\1\11\1\22\1\13\1\12\1\34\1\14\1\30"+
    "\1\15\1\32\1\27\1\2\1\26\2\2\3\0\1\50\1\31\1\0"+
    "\1\16\1\25\1\23\1\17\1\20\1\21\1\2\1\33\1\10\1\35"+
    "\1\2\1\24\1\11\1\22\1\13\1\12\1\34\1\14\1\30\1\15"+
    "\1\32\1\27\1\2\1\26\2\2\1\57\1\43\1\60\1\44\6\3"+
    "\1\65\32\3\2\0\4\2\4\0\1\2\2\0\1\3\7\0\1\2"+
    "\4\0\1\2\5\0\27\2\1\0\37\2\1\0\70\2\2\10\115\2"+
    "\1\30\u0142\2\4\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2"+
    "\21\0\160\3\5\2\1\0\2\2\2\0\4\2\10\0\1\2\1\0"+
    "\3\2\1\0\1\2\1\0\24\2\1\0\123\2\1\0\213\2\1\0"+
    "\5\3\2\0\236\2\11\0\46\2\2\0\1\2\7\0\47\2\7\0"+
    "\1\2\1\0\55\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\10\0\33\2\5\0\3\2\15\0\5\3\6\0\1\2\4\0"+
    "\13\3\5\0\53\2\37\3\4\0\2\2\1\3\143\2\1\0\1\2"+
    "\10\3\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2"+
    "\2\0\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\131\2"+
    "\13\3\1\2\16\0\12\3\41\2\11\3\2\2\4\0\1\2\5\0"+
    "\26\2\4\3\1\2\11\3\1\2\3\3\1\2\5\3\22\0\31\2"+
    "\3\3\104\0\1\2\1\0\13\2\67\0\33\3\1\0\4\3\66\2"+
    "\3\3\1\2\22\3\1\2\7\3\12\2\2\3\2\0\12\3\1\0"+
    "\7\2\1\0\7\2\1\0\3\3\1\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\1\2\3\0\4\2\2\0\1\3\1\2"+
    "\7\3\2\0\2\3\2\0\3\3\1\2\10\0\1\3\4\0\2\2"+
    "\1\0\3\2\2\3\2\0\12\3\4\2\7\0\1\2\5\0\3\3"+
    "\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3\4\0\2\3"+
    "\2\0\3\3\3\0\1\3\7\0\4\2\1\0\1\2\7\0\14\3"+
    "\3\2\1\3\13\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3"+
    "\1\0\3\3\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0"+
    "\12\3\1\0\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2"+
    "\7\3\2\0\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0"+
    "\3\2\2\3\2\0\12\3\1\0\1\2\20\0\1\3\1\2\1\0"+
    "\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0"+
    "\2\2\3\0\2\2\3\0\3\2\3\0\14\2\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\2\0\1\2\6\0\1\3\16\0\12\3\11\0"+
    "\1\2\7\0\3\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\7\3\1\0\3\3\1\0\4\3"+
    "\7\0\2\3\1\0\2\2\6\0\2\2\2\3\2\0\12\3\22\0"+
    "\2\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\2\0\1\3\1\2\7\3\1\0\3\3\1\0\4\3\7\0"+
    "\2\3\7\0\1\2\1\0\2\2\2\3\2\0\12\3\1\0\2\2"+
    "\17\0\2\3\1\0\10\2\1\0\3\2\1\0\51\2\2\0\1\2"+
    "\7\3\1\0\3\3\1\0\4\3\1\2\10\0\1\3\10\0\2\2"+
    "\2\3\2\0\12\3\12\0\6\2\2\0\2\3\1\0\22\2\3\0"+
    "\30\2\1\0\11\2\1\0\1\2\2\0\7\2\3\0\1\3\4\0"+
    "\6\3\1\0\1\3\1\0\10\3\22\0\2\3\15\0\60\2\1\3"+
    "\2\2\7\3\4\0\10\2\10\3\1\0\12\3\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\3\2\2\6\3\1\0\2\3\1\2\2\0\5\2\1\0"+
    "\1\2\1\0\6\3\2\0\12\3\2\0\4\2\40\0\1\2\27\0"+
    "\2\3\6\0\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0"+
    "\2\3\10\2\1\0\44\2\4\0\24\3\1\0\2\3\5\2\13\3"+
    "\1\0\44\3\11\0\1\3\71\0\53\2\24\3\1\2\12\3\6\0"+
    "\6\2\4\3\4\2\3\3\1\2\3\3\2\2\7\3\3\2\4\3"+
    "\15\2\14\3\1\2\17\3\2\0\46\2\1\0\1\2\5\0\1\2"+
    "\2\0\53\2\1\0\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2"+
    "\2\0\7\2\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2"+
    "\1\0\4\2\2\0\103\2\2\0\3\3\40\0\20\2\20\0\125\2"+
    "\14\0\u026c\2\2\0\21\2\1\0\32\2\5\0\113\2\3\0\3\2"+
    "\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3\13\0\22\2"+
    "\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0\64\2\40\3"+
    "\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0\3\3\2\0"+
    "\12\3\6\0\130\2\10\0\51\2\1\3\1\2\5\0\106\2\12\0"+
    "\35\2\3\0\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2"+
    "\13\0\54\2\4\0\21\3\7\2\2\3\6\0\12\3\46\0\27\2"+
    "\5\3\4\0\65\2\12\3\1\0\35\3\2\0\13\3\6\0\12\3"+
    "\15\0\1\2\130\0\5\3\57\2\21\3\7\2\4\0\12\3\21\0"+
    "\11\3\14\0\3\3\36\2\15\3\2\2\12\3\54\2\16\3\14\0"+
    "\44\2\24\3\10\0\12\3\3\0\3\2\12\3\44\2\122\0\3\3"+
    "\1\0\25\3\4\2\1\3\4\2\3\3\2\2\11\0\300\2\47\3"+
    "\25\0\4\3\u0116\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\16\0"+
    "\5\3\30\0\1\64\1\64\5\3\20\0\2\2\23\0\1\2\13\0"+
    "\5\3\5\0\6\3\1\0\1\2\15\0\1\2\20\0\15\2\3\0"+
    "\33\2\25\0\15\3\4\0\1\3\3\0\14\3\21\0\1\2\4\0"+
    "\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0"+
    "\5\2\4\0\1\2\21\0\51\2\u0a77\0\57\2\1\0\57\2\1\0"+
    "\205\2\6\0\4\2\3\3\2\2\14\0\46\2\1\0\1\2\5\0"+
    "\1\2\2\0\70\2\7\0\1\2\17\0\1\3\27\2\11\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\40\3\57\0\1\2\u01d5\0\3\2"+
    "\31\0\11\2\6\3\1\0\5\2\2\0\5\2\4\0\126\2\2\0"+
    "\2\3\2\0\3\2\1\0\132\2\1\0\4\2\5\0\51\2\3\0"+
    "\136\2\21\0\33\2\65\0\20\2\u0200\0\u19b6\2\112\0\u51cd\2\63\0"+
    "\u048d\2\103\0\56\2\2\0\u010d\2\3\0\20\2\12\3\2\2\24\0"+
    "\57\2\1\3\4\0\12\3\1\0\31\2\7\0\1\3\120\2\2\3"+
    "\45\0\11\2\2\0\147\2\2\0\4\2\1\0\4\2\14\0\13\2"+
    "\115\0\12\2\1\3\3\2\1\3\4\2\1\3\27\2\5\3\20\0"+
    "\1\2\7\0\64\2\14\0\2\3\62\2\21\3\13\0\12\3\6\0"+
    "\22\3\6\2\3\0\1\2\4\0\12\3\34\2\10\3\2\0\27\2"+
    "\15\3\14\0\35\2\3\0\4\3\57\2\16\3\16\0\1\2\12\3"+
    "\46\0\51\2\16\3\11\0\3\2\1\3\10\2\2\3\2\0\12\3"+
    "\6\0\27\2\3\0\1\2\1\3\4\0\60\2\1\3\1\2\3\3"+
    "\2\2\2\3\5\2\2\3\1\2\1\3\1\2\30\0\3\2\2\0"+
    "\13\2\5\3\2\0\3\2\2\3\12\0\6\2\2\0\6\2\2\0"+
    "\6\2\11\0\7\2\1\0\7\2\221\0\43\2\10\3\1\0\2\3"+
    "\2\0\12\3\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u016e\2"+
    "\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2\1\3\12\2"+
    "\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2"+
    "\3\0\20\3\20\0\7\3\14\0\2\2\30\0\3\2\31\0\1\2"+
    "\6\0\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0\12\3"+
    "\7\0\32\2\4\0\1\2\1\0\32\2\13\0\131\2\3\0\6\2"+
    "\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2"+
    "\22\0\3\3\4\0\14\2\1\0\32\2\1\0\23\2\1\0\2\2"+
    "\1\0\17\2\2\0\16\2\42\0\173\2\105\0\65\2\210\0\1\3"+
    "\202\0\35\2\3\0\61\2\57\0\37\2\21\0\33\2\65\0\36\2"+
    "\2\0\44\2\4\0\10\2\1\0\5\2\52\0\236\2\2\0\12\3"+
    "\u0356\0\6\2\2\0\1\2\1\0\54\2\1\0\2\2\3\0\1\2"+
    "\2\0\27\2\252\0\26\2\12\0\32\2\106\0\70\2\6\0\2\2"+
    "\100\0\1\2\3\3\1\0\2\3\5\0\4\3\4\2\1\0\3\2"+
    "\1\0\33\2\4\0\3\3\4\0\1\3\40\0\35\2\203\0\66\2"+
    "\12\0\26\2\12\0\23\2\215\0\111\2\u03b7\0\3\3\65\2\17\3"+
    "\37\0\12\3\20\0\3\3\55\2\13\3\2\0\1\3\22\0\31\2"+
    "\7\0\12\3\6\0\3\3\44\2\16\3\1\0\12\3\100\0\3\3"+
    "\60\2\16\3\4\2\13\0\12\3\u04a6\0\53\2\15\3\10\0\12\3"+
    "\u0936\0\u036f\2\221\0\143\2\u0b9d\0\u042f\2\u33d1\0\u0239\2\u04c7\0\105\2"+
    "\13\0\1\2\56\3\20\0\4\3\15\2\u4060\0\2\2\u2163\0\5\3"+
    "\3\0\26\3\2\0\7\3\36\0\4\3\224\0\3\3\u01bb\0\125\2"+
    "\1\0\107\2\1\0\2\2\2\0\1\2\2\0\2\2\2\0\4\2"+
    "\1\0\14\2\1\0\1\2\1\0\7\2\1\0\101\2\1\0\4\2"+
    "\2\0\10\2\1\0\7\2\1\0\34\2\1\0\4\2\1\0\5\2"+
    "\1\0\1\2\3\0\7\2\1\0\u0154\2\2\0\31\2\1\0\31\2"+
    "\1\0\37\2\1\0\31\2\1\0\37\2\1\0\31\2\1\0\37\2"+
    "\1\0\31\2\1\0\37\2\1\0\31\2\1\0\10\2\2\0\62\3"+
    "\u1600\0\4\2\1\0\33\2\1\0\2\2\1\0\1\2\2\0\1\2"+
    "\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2"+
    "\4\0\1\2\1\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2"+
    "\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2"+
    "\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\21\2"+
    "\5\0\3\2\1\0\5\2\1\0\21\2\u1144\0\ua6d7\2\51\0\u1035\2"+
    "\13\0\336\2\u3fe2\0\u021e\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\3\36\0\140\3\200\0\360\3\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\16\3\1\6\1\7\1\10\1\1\1\11\1\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\32\1\0\1\33\1\0\25\3\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\10\3"+
    "\1\46\16\3\1\47\4\3\1\50\30\3\1\51\6\3"+
    "\1\52\4\3\1\53\1\54\6\3\1\55\4\3\1\56"+
    "\12\3\1\57\1\3\1\60\1\3\1\61\1\62\10\3"+
    "\1\63\5\3\1\64\4\3\1\65\3\3\1\66\1\67"+
    "\3\3\1\70\1\71\1\72\1\73\1\74\1\3\1\75"+
    "\1\76\3\3\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\242\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\242\0\242\0\242\0\u04da\0\u0510\0\u0546\0\242\0\u057c"+
    "\0\u05b2\0\u05e8\0\242\0\u061e\0\u0654\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\u068a\0\u0144"+
    "\0\u017a\0\242\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\u0b64\0\242\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u010e\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\242\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u010e\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u010e"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u010e\0\u176a"+
    "\0\u17a0\0\u17d6\0\u180c\0\u010e\0\u010e\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u010e\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u010e\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u010e\0\u1c7a\0\u010e\0\u1cb0\0\u010e"+
    "\0\u010e\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u010e\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u010e"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u010e\0\u207c\0\u20b2\0\u20e8"+
    "\0\u010e\0\u010e\0\u211e\0\u2154\0\u218a\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u21c0\0\u010e\0\u010e\0\u21f6\0\u222c\0\u2262"+
    "\0\u010e\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\6\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\6\1\26\1\6\1\27"+
    "\3\6\1\30\2\6\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\11"+
    "\2\0\6\55\1\56\65\55\1\0\45\55\1\57\6\55"+
    "\72\0\1\5\2\0\1\60\62\0\3\6\4\0\26\6"+
    "\27\0\1\6\1\0\1\60\64\0\5\61\1\62\1\0"+
    "\57\61\6\63\2\0\56\63\1\0\3\6\4\0\1\6"+
    "\1\64\24\6\27\0\1\6\1\0\3\6\4\0\1\65"+
    "\2\6\1\66\22\6\27\0\1\6\1\0\3\6\4\0"+
    "\4\6\1\67\1\6\1\70\17\6\27\0\1\6\1\0"+
    "\3\6\4\0\3\6\1\71\4\6\1\72\15\6\27\0"+
    "\1\6\1\0\3\6\4\0\10\6\1\73\15\6\27\0"+
    "\1\6\1\0\3\6\4\0\20\6\1\74\5\6\27\0"+
    "\1\6\1\0\3\6\4\0\1\75\7\6\1\76\15\6"+
    "\27\0\1\6\1\0\3\6\4\0\12\6\1\77\5\6"+
    "\1\100\5\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\101\17\6\27\0\1\6\1\0\3\6\4\0\3\6"+
    "\1\102\22\6\27\0\1\6\1\0\3\6\4\0\3\6"+
    "\1\103\2\6\1\104\17\6\27\0\1\6\1\0\3\6"+
    "\4\0\3\6\1\105\22\6\27\0\1\6\1\0\3\6"+
    "\4\0\6\6\1\106\1\6\1\107\15\6\27\0\1\6"+
    "\1\0\3\6\4\0\6\6\1\110\17\6\27\0\1\6"+
    "\41\0\1\111\72\0\1\112\62\0\1\113\70\0\1\114"+
    "\65\0\1\115\65\0\1\116\5\0\1\117\62\0\1\120"+
    "\66\0\1\121\60\0\1\56\27\0\1\122\57\0\3\6"+
    "\4\0\2\6\1\123\23\6\27\0\1\6\1\0\3\6"+
    "\4\0\10\6\1\124\15\6\27\0\1\6\1\0\3\6"+
    "\4\0\20\6\1\125\5\6\27\0\1\6\1\0\3\6"+
    "\4\0\1\126\25\6\27\0\1\6\1\0\3\6\4\0"+
    "\4\6\1\127\21\6\27\0\1\6\1\0\3\6\4\0"+
    "\1\6\1\130\24\6\27\0\1\6\1\0\3\6\4\0"+
    "\5\6\1\131\20\6\27\0\1\6\1\0\3\6\4\0"+
    "\16\6\1\132\7\6\27\0\1\6\1\0\3\6\4\0"+
    "\6\6\1\133\17\6\27\0\1\6\1\0\3\6\4\0"+
    "\15\6\1\134\10\6\27\0\1\6\1\0\3\6\4\0"+
    "\11\6\1\135\1\6\1\136\12\6\27\0\1\6\1\0"+
    "\3\6\4\0\5\6\1\137\20\6\27\0\1\6\1\0"+
    "\3\6\4\0\21\6\1\140\4\6\27\0\1\6\1\0"+
    "\3\6\4\0\14\6\1\141\11\6\27\0\1\6\1\0"+
    "\3\6\4\0\21\6\1\142\4\6\27\0\1\6\1\0"+
    "\3\6\4\0\12\6\1\143\13\6\27\0\1\6\1\0"+
    "\3\6\4\0\1\6\1\144\24\6\27\0\1\6\1\0"+
    "\3\6\4\0\3\6\1\145\22\6\27\0\1\6\1\0"+
    "\3\6\4\0\13\6\1\146\1\147\11\6\27\0\1\6"+
    "\1\0\3\6\4\0\4\6\1\150\21\6\27\0\1\6"+
    "\1\0\3\6\4\0\20\6\1\151\5\6\27\0\1\6"+
    "\45\0\1\152\21\0\3\6\4\0\3\6\1\153\22\6"+
    "\27\0\1\6\1\0\3\6\4\0\12\6\1\154\13\6"+
    "\27\0\1\6\1\0\3\6\4\0\5\6\1\155\20\6"+
    "\27\0\1\6\1\0\3\6\4\0\12\6\1\156\13\6"+
    "\27\0\1\6\1\0\3\6\4\0\6\6\1\157\17\6"+
    "\27\0\1\6\1\0\3\6\4\0\2\6\1\160\23\6"+
    "\27\0\1\6\1\0\3\6\4\0\3\6\1\161\22\6"+
    "\27\0\1\6\1\0\3\6\4\0\5\6\1\162\20\6"+
    "\27\0\1\6\1\0\3\6\4\0\22\6\1\163\3\6"+
    "\27\0\1\6\1\0\3\6\4\0\1\164\25\6\27\0"+
    "\1\6\1\0\3\6\4\0\1\165\25\6\27\0\1\6"+
    "\1\0\3\6\4\0\10\6\1\166\15\6\27\0\1\6"+
    "\1\0\3\6\4\0\11\6\1\167\5\6\1\170\6\6"+
    "\27\0\1\6\1\0\3\6\4\0\20\6\1\171\5\6"+
    "\27\0\1\6\1\0\3\6\4\0\13\6\1\172\12\6"+
    "\27\0\1\6\1\0\3\6\4\0\5\6\1\173\20\6"+
    "\27\0\1\6\1\0\3\6\4\0\15\6\1\174\10\6"+
    "\27\0\1\6\1\0\3\6\4\0\14\6\1\175\11\6"+
    "\27\0\1\6\1\0\3\6\4\0\1\176\25\6\27\0"+
    "\1\6\1\0\3\6\4\0\3\6\1\177\22\6\27\0"+
    "\1\6\1\0\3\6\4\0\7\6\1\200\16\6\27\0"+
    "\1\6\1\0\3\6\4\0\5\6\1\201\20\6\27\0"+
    "\1\6\1\0\3\6\4\0\4\6\1\202\21\6\27\0"+
    "\1\6\1\0\3\6\4\0\5\6\1\203\20\6\27\0"+
    "\1\6\1\0\3\6\4\0\4\6\1\204\21\6\27\0"+
    "\1\6\1\0\3\6\4\0\13\6\1\205\12\6\27\0"+
    "\1\6\1\0\3\6\4\0\10\6\1\206\15\6\27\0"+
    "\1\6\1\0\3\6\4\0\4\6\1\207\21\6\27\0"+
    "\1\6\1\0\3\6\4\0\3\6\1\210\22\6\27\0"+
    "\1\6\1\0\3\6\4\0\25\6\1\211\27\0\1\6"+
    "\1\0\3\6\4\0\12\6\1\212\13\6\27\0\1\6"+
    "\1\0\3\6\4\0\1\6\1\213\24\6\27\0\1\6"+
    "\1\0\3\6\4\0\4\6\1\214\21\6\27\0\1\6"+
    "\1\0\3\6\4\0\6\6\1\215\17\6\27\0\1\6"+
    "\1\0\3\6\4\0\10\6\1\216\15\6\27\0\1\6"+
    "\1\0\3\6\4\0\3\6\1\217\22\6\27\0\1\6"+
    "\1\0\3\6\4\0\22\6\1\220\3\6\27\0\1\6"+
    "\1\0\3\6\4\0\1\221\25\6\27\0\1\6\1\0"+
    "\3\6\4\0\1\222\25\6\27\0\1\6\1\0\3\6"+
    "\4\0\10\6\1\223\15\6\27\0\1\6\1\0\3\6"+
    "\4\0\3\6\1\224\22\6\27\0\1\6\1\0\3\6"+
    "\4\0\4\6\1\225\21\6\27\0\1\6\1\0\3\6"+
    "\4\0\6\6\1\226\17\6\27\0\1\6\1\0\3\6"+
    "\4\0\6\6\1\227\17\6\27\0\1\6\1\0\3\6"+
    "\4\0\5\6\1\230\20\6\27\0\1\6\1\0\3\6"+
    "\4\0\4\6\1\231\21\6\27\0\1\6\1\0\3\6"+
    "\4\0\6\6\1\232\17\6\27\0\1\6\1\0\3\6"+
    "\4\0\1\233\25\6\27\0\1\6\1\0\3\6\4\0"+
    "\4\6\1\234\21\6\27\0\1\6\1\0\3\6\4\0"+
    "\12\6\1\235\13\6\27\0\1\6\1\0\3\6\4\0"+
    "\6\6\1\236\17\6\27\0\1\6\1\0\3\6\4\0"+
    "\1\237\25\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\240\17\6\27\0\1\6\1\0\3\6\4\0\3\6"+
    "\1\241\22\6\27\0\1\6\1\0\3\6\4\0\14\6"+
    "\1\242\11\6\27\0\1\6\1\0\3\6\4\0\4\6"+
    "\1\243\21\6\27\0\1\6\1\0\3\6\4\0\1\6"+
    "\1\244\24\6\27\0\1\6\1\0\3\6\4\0\12\6"+
    "\1\245\13\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\246\17\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\247\17\6\27\0\1\6\1\0\3\6\4\0\7\6"+
    "\1\250\16\6\27\0\1\6\1\0\3\6\4\0\21\6"+
    "\1\251\4\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\252\17\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\253\17\6\27\0\1\6\1\0\3\6\4\0\4\6"+
    "\1\254\21\6\27\0\1\6\1\0\3\6\4\0\2\6"+
    "\1\255\23\6\27\0\1\6\1\0\3\6\4\0\3\6"+
    "\1\256\22\6\27\0\1\6\1\0\3\6\4\0\4\6"+
    "\1\257\21\6\27\0\1\6\1\0\3\6\4\0\4\6"+
    "\1\260\21\6\27\0\1\6\1\0\3\6\4\0\14\6"+
    "\1\261\11\6\27\0\1\6\1\0\3\6\4\0\20\6"+
    "\1\262\5\6\27\0\1\6\1\0\3\6\4\0\7\6"+
    "\1\263\16\6\27\0\1\6\1\0\3\6\4\0\2\6"+
    "\1\264\23\6\27\0\1\6\1\0\3\6\4\0\22\6"+
    "\1\265\3\6\27\0\1\6\1\0\3\6\4\0\4\6"+
    "\1\266\21\6\27\0\1\6\1\0\3\6\4\0\12\6"+
    "\1\267\13\6\27\0\1\6\1\0\3\6\4\0\10\6"+
    "\1\270\15\6\27\0\1\6\1\0\3\6\4\0\24\6"+
    "\1\271\1\6\27\0\1\6\1\0\3\6\4\0\4\6"+
    "\1\272\21\6\27\0\1\6\1\0\3\6\4\0\20\6"+
    "\1\273\5\6\27\0\1\6\1\0\3\6\4\0\6\6"+
    "\1\274\17\6\27\0\1\6\1\0\3\6\4\0\5\6"+
    "\1\275\1\276\1\6\1\277\15\6\27\0\1\6\1\0"+
    "\3\6\4\0\3\6\1\300\22\6\27\0\1\6\1\0"+
    "\3\6\4\0\6\6\1\301\17\6\27\0\1\6\1\0"+
    "\3\6\4\0\14\6\1\302\11\6\27\0\1\6\1\0"+
    "\3\6\4\0\6\6\1\303\17\6\27\0\1\6\1\0"+
    "\3\6\4\0\21\6\1\304\4\6\27\0\1\6\1\0"+
    "\3\6\4\0\3\6\1\305\22\6\27\0\1\6\1\0"+
    "\3\6\4\0\4\6\1\306\21\6\27\0\1\6\1\0"+
    "\3\6\4\0\22\6\1\307\3\6\27\0\1\6\1\0"+
    "\3\6\4\0\21\6\1\310\4\6\27\0\1\6\1\0"+
    "\3\6\4\0\14\6\1\311\11\6\27\0\1\6\1\0"+
    "\3\6\4\0\20\6\1\312\5\6\27\0\1\6\1\0"+
    "\3\6\4\0\20\6\1\313\5\6\27\0\1\6\1\0"+
    "\3\6\4\0\16\6\1\314\7\6\27\0\1\6\1\0"+
    "\3\6\4\0\7\6\1\315\16\6\27\0\1\6\1\0"+
    "\3\6\4\0\10\6\1\316\15\6\27\0\1\6\1\0"+
    "\3\6\4\0\4\6\1\317\21\6\27\0\1\6\1\0"+
    "\3\6\4\0\6\6\1\320\17\6\27\0\1\6\1\0"+
    "\3\6\4\0\3\6\1\321\22\6\27\0\1\6\1\0"+
    "\3\6\4\0\10\6\1\322\15\6\27\0\1\6\1\0"+
    "\3\6\4\0\24\6\1\323\1\6\27\0\1\6\1\0"+
    "\3\6\4\0\5\6\1\324\20\6\27\0\1\6\1\0"+
    "\3\6\4\0\2\6\1\325\23\6\27\0\1\6\1\0"+
    "\3\6\4\0\10\6\1\326\15\6\27\0\1\6\1\0"+
    "\3\6\4\0\22\6\1\327\3\6\27\0\1\6\1\0"+
    "\3\6\4\0\4\6\1\330\21\6\27\0\1\6\1\0"+
    "\3\6\4\0\10\6\1\331\15\6\27\0\1\6\1\0"+
    "\3\6\4\0\3\6\1\332\22\6\27\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\17\1\3\11\3\1\1\11"+
    "\3\1\1\11\2\1\11\11\2\1\1\0\1\11\1\0"+
    "\25\1\10\11\1\1\1\11\27\1\1\11\160\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1; 
    yycolumn = 1;
    yychar = 1; 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2908) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
            } 
            // fall through
          case 65: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" num"); return new Symbol(sym.numEntero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" identificador"); return new Symbol(sym.identificador, yyline, yycolumn,yytext());
            } 
            // fall through
          case 67: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" modo"); return new Symbol(sym.punto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 5: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 69: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(sym.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" parentesis Ab"); return new Symbol(sym.parent_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" parentesis Cerr"); return new Symbol(sym.parent_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" not"); return new Symbol(sym.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" Distinto"); return new Symbol(sym.diferencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym.mayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 12: 
            { return new Symbol(sym.asignacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym.menor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" potencia"); return new Symbol(sym.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" mas"); return new Symbol(sym.mas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" menos"); return new Symbol(sym.menos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" por"); return new Symbol(sym.por, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" div"); return new Symbol(sym.div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" modo"); return new Symbol(sym.modular, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 20: 
            { return new Symbol(sym.ptoYcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" llaveA"); return new Symbol(sym.llave_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" llaveC"); return new Symbol(sym.llave_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" llaveC"); return new Symbol(sym.dosPtos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 24: 
            { 
            } 
            // fall through
          case 88: break;
          case 25: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 89: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" decimal"); return new Symbol(sym.numDecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(sym.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" And"); return new Symbol(sym.and, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" Or"); return new Symbol(sym.or, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym.mayorQ, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(sym.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym.menorQ, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 34: 
            { yybegin(ComentMultiLinea); System.out.println("Reconocio comentario Multi: "+yytext());
            } 
            // fall through
          case 98: break;
          case 35: 
            { System.out.println("Reconocio "+yytext()+" --"); return new Symbol(sym.incremento, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 36: 
            { System.out.println("Reconocio "+yytext()+" --"); return new Symbol(sym.decremento, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 37: 
            { System.out.println("Reconocio "+yytext()+" caracter"); return new Symbol(sym.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 38: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._asa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 39: 
            { yybegin(ComentSimple); System.out.println("Reconocio comentario Linea: "+yytext());
            } 
            // fall through
          case 103: break;
          case 40: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 41: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._texto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 42: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._falso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 43: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._vacio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 44: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._valor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 45: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._romper, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 46: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 47: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._mostrar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 48: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._retorno, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 49: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._definir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 50: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._decimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 51: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._importar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 52: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._esFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 53: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._booleano, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 54: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._principal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 55: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._dibujarTs, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 56: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._noCumple, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 57: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._continuar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 58: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._cambiarA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 59: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._verdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 60: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._hastaQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 61: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._dibujarAst, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 62: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._dibujarExp, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 63: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._mientrasQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 64: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(sym._esVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
